Compiled ACIR for main (unoptimized):
func 0
current witness index : 811
private parameters indices : [0]
public parameters indices : [1]
return value indices : []
EXPR [ (1, _0, _0) (-1, _2) 0 ]
EXPR [ (1, _1, _1) (-1, _3) 0 ]
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(4)), Simple(Witness(5)), Simple(Witness(6))]
EXPR [ (1, _0, _2) (-1, _7) 0 ]
EXPR [ (1, _0, _3) (-1, _8) 0 ]
EXPR [ (-1, _6) (-1, _9) 0 ]
EXPR [ (1, _1, _2) (-1, _10) 0 ]
EXPR [ (1, _1, _3) (-1, _11) 0 ]
EXPR [ (555, _4, _6) (1, _4) (-1, _8) (-1, _10) 0 ]
EXPR [ (555, _5, _9) (1, _5) (1, _7) (-1, _11) 0 ]
EXPR [ (1, _7, _11) (-1, _6) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 })], outputs: []











BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(12)), Simple(Witness(13)), Simple(Witness(14))]
EXPR [ (1, _2, _4) (-1, _15) 0 ]
EXPR [ (1, _3, _4) (-1, _16) 0 ]
EXPR [ (-1, _14) (-1, _17) 0 ]
EXPR [ (1, _2, _5) (-1, _18) 0 ]
EXPR [ (1, _3, _5) (-1, _19) 0 ]
EXPR [ (555, _12, _14) (1, _12) (-1, _16) (-1, _18) 0 ]
EXPR [ (555, _13, _17) (1, _13) (1, _15) (-1, _19) 0 ]
EXPR [ (1, _15, _19) (-1, _14) 0 ]
















BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(20)), Simple(Witness(21)), Simple(Witness(22))]
EXPR [ (1, _2, _12) (-1, _23) 0 ]
EXPR [ (1, _3, _12) (-1, _24) 0 ]
EXPR [ (-1, _22) (-1, _25) 0 ]
EXPR [ (1, _2, _13) (-1, _26) 0 ]
EXPR [ (1, _3, _13) (-1, _27) 0 ]
EXPR [ (555, _20, _22) (1, _20) (-1, _24) (-1, _26) 0 ]
EXPR [ (555, _21, _25) (1, _21) (1, _23) (-1, _27) 0 ]
EXPR [ (1, _23, _27) (-1, _22) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(28)), Simple(Witness(29)), Simple(Witness(30))]
EXPR [ (1, _2, _20) (-1, _31) 0 ]
EXPR [ (1, _3, _20) (-1, _32) 0 ]
EXPR [ (-1, _30) (-1, _33) 0 ]
EXPR [ (1, _2, _21) (-1, _34) 0 ]
EXPR [ (1, _3, _21) (-1, _35) 0 ]
EXPR [ (555, _28, _30) (1, _28) (-1, _32) (-1, _34) 0 ]
EXPR [ (555, _29, _33) (1, _29) (1, _31) (-1, _35) 0 ]
EXPR [ (1, _31, _35) (-1, _30) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(29))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(29))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(36)), Simple(Witness(37)), Simple(Witness(38))]
EXPR [ (1, _2, _28) (-1, _39) 0 ]
EXPR [ (1, _3, _28) (-1, _40) 0 ]
EXPR [ (-1, _38) (-1, _41) 0 ]
EXPR [ (1, _2, _29) (-1, _42) 0 ]
EXPR [ (1, _3, _29) (-1, _43) 0 ]
EXPR [ (555, _36, _38) (1, _36) (-1, _40) (-1, _42) 0 ]
EXPR [ (555, _37, _41) (1, _37) (1, _39) (-1, _43) 0 ]
EXPR [ (1, _39, _43) (-1, _38) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(36))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(37))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(36))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(37))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(44)), Simple(Witness(45)), Simple(Witness(46))]
EXPR [ (1, _2, _36) (-1, _47) 0 ]
EXPR [ (1, _3, _36) (-1, _48) 0 ]
EXPR [ (-1, _46) (-1, _49) 0 ]
EXPR [ (1, _2, _37) (-1, _50) 0 ]
EXPR [ (1, _3, _37) (-1, _51) 0 ]
EXPR [ (555, _44, _46) (1, _44) (-1, _48) (-1, _50) 0 ]
EXPR [ (555, _45, _49) (1, _45) (1, _47) (-1, _51) 0 ]
EXPR [ (1, _47, _51) (-1, _46) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(44))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(44))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(52)), Simple(Witness(53)), Simple(Witness(54))]
EXPR [ (1, _2, _44) (-1, _55) 0 ]
EXPR [ (1, _3, _44) (-1, _56) 0 ]
EXPR [ (-1, _54) (-1, _57) 0 ]
EXPR [ (1, _2, _45) (-1, _58) 0 ]
EXPR [ (1, _3, _45) (-1, _59) 0 ]
EXPR [ (555, _52, _54) (1, _52) (-1, _56) (-1, _58) 0 ]
EXPR [ (555, _53, _57) (1, _53) (1, _55) (-1, _59) 0 ]
EXPR [ (1, _55, _59) (-1, _54) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(52))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(53))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(52))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(53))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(60)), Simple(Witness(61)), Simple(Witness(62))]
EXPR [ (1, _2, _52) (-1, _63) 0 ]
EXPR [ (1, _3, _52) (-1, _64) 0 ]
EXPR [ (-1, _62) (-1, _65) 0 ]
EXPR [ (1, _2, _53) (-1, _66) 0 ]
EXPR [ (1, _3, _53) (-1, _67) 0 ]
EXPR [ (555, _60, _62) (1, _60) (-1, _64) (-1, _66) 0 ]
EXPR [ (555, _61, _65) (1, _61) (1, _63) (-1, _67) 0 ]
EXPR [ (1, _63, _67) (-1, _62) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(60))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(61))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(60))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(61))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(68)), Simple(Witness(69)), Simple(Witness(70))]
EXPR [ (1, _2, _60) (-1, _71) 0 ]
EXPR [ (1, _3, _60) (-1, _72) 0 ]
EXPR [ (-1, _70) (-1, _73) 0 ]
EXPR [ (1, _2, _61) (-1, _74) 0 ]
EXPR [ (1, _3, _61) (-1, _75) 0 ]
EXPR [ (555, _68, _70) (1, _68) (-1, _72) (-1, _74) 0 ]
EXPR [ (555, _69, _73) (1, _69) (1, _71) (-1, _75) 0 ]
EXPR [ (1, _71, _75) (-1, _70) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(68))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(69))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(68))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(69))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(76)), Simple(Witness(77)), Simple(Witness(78))]
EXPR [ (1, _2, _68) (-1, _79) 0 ]
EXPR [ (1, _3, _68) (-1, _80) 0 ]
EXPR [ (-1, _78) (-1, _81) 0 ]
EXPR [ (1, _2, _69) (-1, _82) 0 ]
EXPR [ (1, _3, _69) (-1, _83) 0 ]
EXPR [ (555, _76, _78) (1, _76) (-1, _80) (-1, _82) 0 ]
EXPR [ (555, _77, _81) (1, _77) (1, _79) (-1, _83) 0 ]
EXPR [ (1, _79, _83) (-1, _78) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(76))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(77))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(76))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(77))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(84)), Simple(Witness(85)), Simple(Witness(86))]
EXPR [ (1, _2, _76) (-1, _87) 0 ]
EXPR [ (1, _3, _76) (-1, _88) 0 ]
EXPR [ (-1, _86) (-1, _89) 0 ]
EXPR [ (1, _2, _77) (-1, _90) 0 ]
EXPR [ (1, _3, _77) (-1, _91) 0 ]
EXPR [ (555, _84, _86) (1, _84) (-1, _88) (-1, _90) 0 ]
EXPR [ (555, _85, _89) (1, _85) (1, _87) (-1, _91) 0 ]
EXPR [ (1, _87, _91) (-1, _86) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(84))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(84))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(92)), Simple(Witness(93)), Simple(Witness(94))]
EXPR [ (1, _2, _84) (-1, _95) 0 ]
EXPR [ (1, _3, _84) (-1, _96) 0 ]
EXPR [ (-1, _94) (-1, _97) 0 ]
EXPR [ (1, _2, _85) (-1, _98) 0 ]
EXPR [ (1, _3, _85) (-1, _99) 0 ]
EXPR [ (555, _92, _94) (1, _92) (-1, _96) (-1, _98) 0 ]
EXPR [ (555, _93, _97) (1, _93) (1, _95) (-1, _99) 0 ]
EXPR [ (1, _95, _99) (-1, _94) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(92))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(93))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(92))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(93))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(100)), Simple(Witness(101)), Simple(Witness(102))]
EXPR [ (1, _2, _92) (-1, _103) 0 ]
EXPR [ (1, _3, _92) (-1, _104) 0 ]
EXPR [ (-1, _102) (-1, _105) 0 ]
EXPR [ (1, _2, _93) (-1, _106) 0 ]
EXPR [ (1, _3, _93) (-1, _107) 0 ]
EXPR [ (555, _100, _102) (1, _100) (-1, _104) (-1, _106) 0 ]
EXPR [ (555, _101, _105) (1, _101) (1, _103) (-1, _107) 0 ]
EXPR [ (1, _103, _107) (-1, _102) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(100))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(101))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(100))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(101))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(108)), Simple(Witness(109)), Simple(Witness(110))]
EXPR [ (1, _2, _100) (-1, _111) 0 ]
EXPR [ (1, _3, _100) (-1, _112) 0 ]
EXPR [ (-1, _110) (-1, _113) 0 ]
EXPR [ (1, _2, _101) (-1, _114) 0 ]
EXPR [ (1, _3, _101) (-1, _115) 0 ]
EXPR [ (555, _108, _110) (1, _108) (-1, _112) (-1, _114) 0 ]
EXPR [ (555, _109, _113) (1, _109) (1, _111) (-1, _115) 0 ]
EXPR [ (1, _111, _115) (-1, _110) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(108))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(109))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(108))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(109))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(116)), Simple(Witness(117)), Simple(Witness(118))]
EXPR [ (1, _2, _108) (-1, _119) 0 ]
EXPR [ (1, _3, _108) (-1, _120) 0 ]
EXPR [ (-1, _118) (-1, _121) 0 ]
EXPR [ (1, _2, _109) (-1, _122) 0 ]
EXPR [ (1, _3, _109) (-1, _123) 0 ]
EXPR [ (555, _116, _118) (1, _116) (-1, _120) (-1, _122) 0 ]
EXPR [ (555, _117, _121) (1, _117) (1, _119) (-1, _123) 0 ]
EXPR [ (1, _119, _123) (-1, _118) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(116))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(117))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(116))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(117))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(124)), Simple(Witness(125)), Simple(Witness(126))]
EXPR [ (1, _2, _116) (-1, _127) 0 ]
EXPR [ (1, _3, _116) (-1, _128) 0 ]
EXPR [ (-1, _126) (-1, _129) 0 ]
EXPR [ (1, _2, _117) (-1, _130) 0 ]
EXPR [ (1, _3, _117) (-1, _131) 0 ]
EXPR [ (555, _124, _126) (1, _124) (-1, _128) (-1, _130) 0 ]
EXPR [ (555, _125, _129) (1, _125) (1, _127) (-1, _131) 0 ]
EXPR [ (1, _127, _131) (-1, _126) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(124))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(124))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(132)), Simple(Witness(133)), Simple(Witness(134))]
EXPR [ (1, _2, _124) (-1, _135) 0 ]
EXPR [ (1, _3, _124) (-1, _136) 0 ]
EXPR [ (-1, _134) (-1, _137) 0 ]
EXPR [ (1, _2, _125) (-1, _138) 0 ]
EXPR [ (1, _3, _125) (-1, _139) 0 ]
EXPR [ (555, _132, _134) (1, _132) (-1, _136) (-1, _138) 0 ]
EXPR [ (555, _133, _137) (1, _133) (1, _135) (-1, _139) 0 ]
EXPR [ (1, _135, _139) (-1, _134) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(132))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(132))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(140)), Simple(Witness(141)), Simple(Witness(142))]
EXPR [ (1, _2, _132) (-1, _143) 0 ]
EXPR [ (1, _3, _132) (-1, _144) 0 ]
EXPR [ (-1, _142) (-1, _145) 0 ]
EXPR [ (1, _2, _133) (-1, _146) 0 ]
EXPR [ (1, _3, _133) (-1, _147) 0 ]
EXPR [ (555, _140, _142) (1, _140) (-1, _144) (-1, _146) 0 ]
EXPR [ (555, _141, _145) (1, _141) (1, _143) (-1, _147) 0 ]
EXPR [ (1, _143, _147) (-1, _142) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(140))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(140))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(148)), Simple(Witness(149)), Simple(Witness(150))]
EXPR [ (1, _2, _140) (-1, _151) 0 ]
EXPR [ (1, _3, _140) (-1, _152) 0 ]
EXPR [ (-1, _150) (-1, _153) 0 ]
EXPR [ (1, _2, _141) (-1, _154) 0 ]
EXPR [ (1, _3, _141) (-1, _155) 0 ]
EXPR [ (555, _148, _150) (1, _148) (-1, _152) (-1, _154) 0 ]
EXPR [ (555, _149, _153) (1, _149) (1, _151) (-1, _155) 0 ]
EXPR [ (1, _151, _155) (-1, _150) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(148))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(149))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(148))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(149))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(156)), Simple(Witness(157)), Simple(Witness(158))]
EXPR [ (1, _2, _148) (-1, _159) 0 ]
EXPR [ (1, _3, _148) (-1, _160) 0 ]
EXPR [ (-1, _158) (-1, _161) 0 ]
EXPR [ (1, _2, _149) (-1, _162) 0 ]
EXPR [ (1, _3, _149) (-1, _163) 0 ]
EXPR [ (555, _156, _158) (1, _156) (-1, _160) (-1, _162) 0 ]
EXPR [ (555, _157, _161) (1, _157) (1, _159) (-1, _163) 0 ]
EXPR [ (1, _159, _163) (-1, _158) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(156))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(157))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(156))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(157))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(164)), Simple(Witness(165)), Simple(Witness(166))]
EXPR [ (1, _2, _156) (-1, _167) 0 ]
EXPR [ (1, _3, _156) (-1, _168) 0 ]
EXPR [ (-1, _166) (-1, _169) 0 ]
EXPR [ (1, _2, _157) (-1, _170) 0 ]
EXPR [ (1, _3, _157) (-1, _171) 0 ]
EXPR [ (555, _164, _166) (1, _164) (-1, _168) (-1, _170) 0 ]
EXPR [ (555, _165, _169) (1, _165) (1, _167) (-1, _171) 0 ]
EXPR [ (1, _167, _171) (-1, _166) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(164))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(165))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(164))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(165))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(172)), Simple(Witness(173)), Simple(Witness(174))]
EXPR [ (1, _2, _164) (-1, _175) 0 ]
EXPR [ (1, _3, _164) (-1, _176) 0 ]
EXPR [ (-1, _174) (-1, _177) 0 ]
EXPR [ (1, _2, _165) (-1, _178) 0 ]
EXPR [ (1, _3, _165) (-1, _179) 0 ]
EXPR [ (555, _172, _174) (1, _172) (-1, _176) (-1, _178) 0 ]
EXPR [ (555, _173, _177) (1, _173) (1, _175) (-1, _179) 0 ]
EXPR [ (1, _175, _179) (-1, _174) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(172))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(173))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(172))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(173))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(180)), Simple(Witness(181)), Simple(Witness(182))]
EXPR [ (1, _2, _172) (-1, _183) 0 ]
EXPR [ (1, _3, _172) (-1, _184) 0 ]
EXPR [ (-1, _182) (-1, _185) 0 ]
EXPR [ (1, _2, _173) (-1, _186) 0 ]
EXPR [ (1, _3, _173) (-1, _187) 0 ]
EXPR [ (555, _180, _182) (1, _180) (-1, _184) (-1, _186) 0 ]
EXPR [ (555, _181, _185) (1, _181) (1, _183) (-1, _187) 0 ]
EXPR [ (1, _183, _187) (-1, _182) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(180))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(181))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(180))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(181))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(188)), Simple(Witness(189)), Simple(Witness(190))]
EXPR [ (1, _2, _180) (-1, _191) 0 ]
EXPR [ (1, _3, _180) (-1, _192) 0 ]
EXPR [ (-1, _190) (-1, _193) 0 ]
EXPR [ (1, _2, _181) (-1, _194) 0 ]
EXPR [ (1, _3, _181) (-1, _195) 0 ]
EXPR [ (555, _188, _190) (1, _188) (-1, _192) (-1, _194) 0 ]
EXPR [ (555, _189, _193) (1, _189) (1, _191) (-1, _195) 0 ]
EXPR [ (1, _191, _195) (-1, _190) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(188))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(189))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(188))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(189))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(196)), Simple(Witness(197)), Simple(Witness(198))]
EXPR [ (1, _2, _188) (-1, _199) 0 ]
EXPR [ (1, _3, _188) (-1, _200) 0 ]
EXPR [ (-1, _198) (-1, _201) 0 ]
EXPR [ (1, _2, _189) (-1, _202) 0 ]
EXPR [ (1, _3, _189) (-1, _203) 0 ]
EXPR [ (555, _196, _198) (1, _196) (-1, _200) (-1, _202) 0 ]
EXPR [ (555, _197, _201) (1, _197) (1, _199) (-1, _203) 0 ]
EXPR [ (1, _199, _203) (-1, _198) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(196))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(197))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(196))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(197))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(204)), Simple(Witness(205)), Simple(Witness(206))]
EXPR [ (1, _2, _196) (-1, _207) 0 ]
EXPR [ (1, _3, _196) (-1, _208) 0 ]
EXPR [ (-1, _206) (-1, _209) 0 ]
EXPR [ (1, _2, _197) (-1, _210) 0 ]
EXPR [ (1, _3, _197) (-1, _211) 0 ]
EXPR [ (555, _204, _206) (1, _204) (-1, _208) (-1, _210) 0 ]
EXPR [ (555, _205, _209) (1, _205) (1, _207) (-1, _211) 0 ]
EXPR [ (1, _207, _211) (-1, _206) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(204))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(205))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(204))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(205))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(212)), Simple(Witness(213)), Simple(Witness(214))]
EXPR [ (1, _2, _204) (-1, _215) 0 ]
EXPR [ (1, _3, _204) (-1, _216) 0 ]
EXPR [ (-1, _214) (-1, _217) 0 ]
EXPR [ (1, _2, _205) (-1, _218) 0 ]
EXPR [ (1, _3, _205) (-1, _219) 0 ]
EXPR [ (555, _212, _214) (1, _212) (-1, _216) (-1, _218) 0 ]
EXPR [ (555, _213, _217) (1, _213) (1, _215) (-1, _219) 0 ]
EXPR [ (1, _215, _219) (-1, _214) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(212))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(213))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(212))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(213))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(220)), Simple(Witness(221)), Simple(Witness(222))]
EXPR [ (1, _2, _212) (-1, _223) 0 ]
EXPR [ (1, _3, _212) (-1, _224) 0 ]
EXPR [ (-1, _222) (-1, _225) 0 ]
EXPR [ (1, _2, _213) (-1, _226) 0 ]
EXPR [ (1, _3, _213) (-1, _227) 0 ]
EXPR [ (555, _220, _222) (1, _220) (-1, _224) (-1, _226) 0 ]
EXPR [ (555, _221, _225) (1, _221) (1, _223) (-1, _227) 0 ]
EXPR [ (1, _223, _227) (-1, _222) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(220))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(221))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(220))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(221))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(228)), Simple(Witness(229)), Simple(Witness(230))]
EXPR [ (1, _2, _220) (-1, _231) 0 ]
EXPR [ (1, _3, _220) (-1, _232) 0 ]
EXPR [ (-1, _230) (-1, _233) 0 ]
EXPR [ (1, _2, _221) (-1, _234) 0 ]
EXPR [ (1, _3, _221) (-1, _235) 0 ]
EXPR [ (555, _228, _230) (1, _228) (-1, _232) (-1, _234) 0 ]
EXPR [ (555, _229, _233) (1, _229) (1, _231) (-1, _235) 0 ]
EXPR [ (1, _231, _235) (-1, _230) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(228))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(229))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(228))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(229))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(236)), Simple(Witness(237)), Simple(Witness(238))]
EXPR [ (1, _2, _228) (-1, _239) 0 ]
EXPR [ (1, _3, _228) (-1, _240) 0 ]
EXPR [ (-1, _238) (-1, _241) 0 ]
EXPR [ (1, _2, _229) (-1, _242) 0 ]
EXPR [ (1, _3, _229) (-1, _243) 0 ]
EXPR [ (555, _236, _238) (1, _236) (-1, _240) (-1, _242) 0 ]
EXPR [ (555, _237, _241) (1, _237) (1, _239) (-1, _243) 0 ]
EXPR [ (1, _239, _243) (-1, _238) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(236))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(237))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(236))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(237))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(244)), Simple(Witness(245)), Simple(Witness(246))]
EXPR [ (1, _2, _236) (-1, _247) 0 ]
EXPR [ (1, _3, _236) (-1, _248) 0 ]
EXPR [ (-1, _246) (-1, _249) 0 ]
EXPR [ (1, _2, _237) (-1, _250) 0 ]
EXPR [ (1, _3, _237) (-1, _251) 0 ]
EXPR [ (555, _244, _246) (1, _244) (-1, _248) (-1, _250) 0 ]
EXPR [ (555, _245, _249) (1, _245) (1, _247) (-1, _251) 0 ]
EXPR [ (1, _247, _251) (-1, _246) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(244))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(245))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(244))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(245))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(252)), Simple(Witness(253)), Simple(Witness(254))]
EXPR [ (1, _2, _244) (-1, _255) 0 ]
EXPR [ (1, _3, _244) (-1, _256) 0 ]
EXPR [ (-1, _254) (-1, _257) 0 ]
EXPR [ (1, _2, _245) (-1, _258) 0 ]
EXPR [ (1, _3, _245) (-1, _259) 0 ]
EXPR [ (555, _252, _254) (1, _252) (-1, _256) (-1, _258) 0 ]
EXPR [ (555, _253, _257) (1, _253) (1, _255) (-1, _259) 0 ]
EXPR [ (1, _255, _259) (-1, _254) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(252))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(253))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(252))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(253))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(260)), Simple(Witness(261)), Simple(Witness(262))]
EXPR [ (1, _2, _252) (-1, _263) 0 ]
EXPR [ (1, _3, _252) (-1, _264) 0 ]
EXPR [ (-1, _262) (-1, _265) 0 ]
EXPR [ (1, _2, _253) (-1, _266) 0 ]
EXPR [ (1, _3, _253) (-1, _267) 0 ]
EXPR [ (555, _260, _262) (1, _260) (-1, _264) (-1, _266) 0 ]
EXPR [ (555, _261, _265) (1, _261) (1, _263) (-1, _267) 0 ]
EXPR [ (1, _263, _267) (-1, _262) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(260))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(261))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(260))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(261))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(268)), Simple(Witness(269)), Simple(Witness(270))]
EXPR [ (1, _2, _260) (-1, _271) 0 ]
EXPR [ (1, _3, _260) (-1, _272) 0 ]
EXPR [ (-1, _270) (-1, _273) 0 ]
EXPR [ (1, _2, _261) (-1, _274) 0 ]
EXPR [ (1, _3, _261) (-1, _275) 0 ]
EXPR [ (555, _268, _270) (1, _268) (-1, _272) (-1, _274) 0 ]
EXPR [ (555, _269, _273) (1, _269) (1, _271) (-1, _275) 0 ]
EXPR [ (1, _271, _275) (-1, _270) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(268))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(269))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(268))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(269))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(276)), Simple(Witness(277)), Simple(Witness(278))]
EXPR [ (1, _2, _268) (-1, _279) 0 ]
EXPR [ (1, _3, _268) (-1, _280) 0 ]
EXPR [ (-1, _278) (-1, _281) 0 ]
EXPR [ (1, _2, _269) (-1, _282) 0 ]
EXPR [ (1, _3, _269) (-1, _283) 0 ]
EXPR [ (555, _276, _278) (1, _276) (-1, _280) (-1, _282) 0 ]
EXPR [ (555, _277, _281) (1, _277) (1, _279) (-1, _283) 0 ]
EXPR [ (1, _279, _283) (-1, _278) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(276))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(277))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(276))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(277))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(284)), Simple(Witness(285)), Simple(Witness(286))]
EXPR [ (1, _2, _276) (-1, _287) 0 ]
EXPR [ (1, _3, _276) (-1, _288) 0 ]
EXPR [ (-1, _286) (-1, _289) 0 ]
EXPR [ (1, _2, _277) (-1, _290) 0 ]
EXPR [ (1, _3, _277) (-1, _291) 0 ]
EXPR [ (555, _284, _286) (1, _284) (-1, _288) (-1, _290) 0 ]
EXPR [ (555, _285, _289) (1, _285) (1, _287) (-1, _291) 0 ]
EXPR [ (1, _287, _291) (-1, _286) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(284))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(284))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(292)), Simple(Witness(293)), Simple(Witness(294))]
EXPR [ (1, _2, _284) (-1, _295) 0 ]
EXPR [ (1, _3, _284) (-1, _296) 0 ]
EXPR [ (-1, _294) (-1, _297) 0 ]
EXPR [ (1, _2, _285) (-1, _298) 0 ]
EXPR [ (1, _3, _285) (-1, _299) 0 ]
EXPR [ (555, _292, _294) (1, _292) (-1, _296) (-1, _298) 0 ]
EXPR [ (555, _293, _297) (1, _293) (1, _295) (-1, _299) 0 ]
EXPR [ (1, _295, _299) (-1, _294) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(292))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(292))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(300)), Simple(Witness(301)), Simple(Witness(302))]
EXPR [ (1, _2, _292) (-1, _303) 0 ]
EXPR [ (1, _3, _292) (-1, _304) 0 ]
EXPR [ (-1, _302) (-1, _305) 0 ]
EXPR [ (1, _2, _293) (-1, _306) 0 ]
EXPR [ (1, _3, _293) (-1, _307) 0 ]
EXPR [ (555, _300, _302) (1, _300) (-1, _304) (-1, _306) 0 ]
EXPR [ (555, _301, _305) (1, _301) (1, _303) (-1, _307) 0 ]
EXPR [ (1, _303, _307) (-1, _302) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(300))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(301))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(300))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(301))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(308)), Simple(Witness(309)), Simple(Witness(310))]
EXPR [ (1, _2, _300) (-1, _311) 0 ]
EXPR [ (1, _3, _300) (-1, _312) 0 ]
EXPR [ (-1, _310) (-1, _313) 0 ]
EXPR [ (1, _2, _301) (-1, _314) 0 ]
EXPR [ (1, _3, _301) (-1, _315) 0 ]
EXPR [ (555, _308, _310) (1, _308) (-1, _312) (-1, _314) 0 ]
EXPR [ (555, _309, _313) (1, _309) (1, _311) (-1, _315) 0 ]
EXPR [ (1, _311, _315) (-1, _310) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(308))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(309))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(308))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(309))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(316)), Simple(Witness(317)), Simple(Witness(318))]
EXPR [ (1, _2, _308) (-1, _319) 0 ]
EXPR [ (1, _3, _308) (-1, _320) 0 ]
EXPR [ (-1, _318) (-1, _321) 0 ]
EXPR [ (1, _2, _309) (-1, _322) 0 ]
EXPR [ (1, _3, _309) (-1, _323) 0 ]
EXPR [ (555, _316, _318) (1, _316) (-1, _320) (-1, _322) 0 ]
EXPR [ (555, _317, _321) (1, _317) (1, _319) (-1, _323) 0 ]
EXPR [ (1, _319, _323) (-1, _318) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(316))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(317))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(316))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(317))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(324)), Simple(Witness(325)), Simple(Witness(326))]
EXPR [ (1, _2, _316) (-1, _327) 0 ]
EXPR [ (1, _3, _316) (-1, _328) 0 ]
EXPR [ (-1, _326) (-1, _329) 0 ]
EXPR [ (1, _2, _317) (-1, _330) 0 ]
EXPR [ (1, _3, _317) (-1, _331) 0 ]
EXPR [ (555, _324, _326) (1, _324) (-1, _328) (-1, _330) 0 ]
EXPR [ (555, _325, _329) (1, _325) (1, _327) (-1, _331) 0 ]
EXPR [ (1, _327, _331) (-1, _326) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(324))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(325))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(324))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(325))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(332)), Simple(Witness(333)), Simple(Witness(334))]
EXPR [ (1, _2, _324) (-1, _335) 0 ]
EXPR [ (1, _3, _324) (-1, _336) 0 ]
EXPR [ (-1, _334) (-1, _337) 0 ]
EXPR [ (1, _2, _325) (-1, _338) 0 ]
EXPR [ (1, _3, _325) (-1, _339) 0 ]
EXPR [ (555, _332, _334) (1, _332) (-1, _336) (-1, _338) 0 ]
EXPR [ (555, _333, _337) (1, _333) (1, _335) (-1, _339) 0 ]
EXPR [ (1, _335, _339) (-1, _334) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(332))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(333))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(332))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(333))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(340)), Simple(Witness(341)), Simple(Witness(342))]
EXPR [ (1, _2, _332) (-1, _343) 0 ]
EXPR [ (1, _3, _332) (-1, _344) 0 ]
EXPR [ (-1, _342) (-1, _345) 0 ]
EXPR [ (1, _2, _333) (-1, _346) 0 ]
EXPR [ (1, _3, _333) (-1, _347) 0 ]
EXPR [ (555, _340, _342) (1, _340) (-1, _344) (-1, _346) 0 ]
EXPR [ (555, _341, _345) (1, _341) (1, _343) (-1, _347) 0 ]
EXPR [ (1, _343, _347) (-1, _342) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(340))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(341))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(340))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(341))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(348)), Simple(Witness(349)), Simple(Witness(350))]
EXPR [ (1, _2, _340) (-1, _351) 0 ]
EXPR [ (1, _3, _340) (-1, _352) 0 ]
EXPR [ (-1, _350) (-1, _353) 0 ]
EXPR [ (1, _2, _341) (-1, _354) 0 ]
EXPR [ (1, _3, _341) (-1, _355) 0 ]
EXPR [ (555, _348, _350) (1, _348) (-1, _352) (-1, _354) 0 ]
EXPR [ (555, _349, _353) (1, _349) (1, _351) (-1, _355) 0 ]
EXPR [ (1, _351, _355) (-1, _350) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(348))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(349))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(348))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(349))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(356)), Simple(Witness(357)), Simple(Witness(358))]
EXPR [ (1, _2, _348) (-1, _359) 0 ]
EXPR [ (1, _3, _348) (-1, _360) 0 ]
EXPR [ (-1, _358) (-1, _361) 0 ]
EXPR [ (1, _2, _349) (-1, _362) 0 ]
EXPR [ (1, _3, _349) (-1, _363) 0 ]
EXPR [ (555, _356, _358) (1, _356) (-1, _360) (-1, _362) 0 ]
EXPR [ (555, _357, _361) (1, _357) (1, _359) (-1, _363) 0 ]
EXPR [ (1, _359, _363) (-1, _358) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(356))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(357))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(356))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(357))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(364)), Simple(Witness(365)), Simple(Witness(366))]
EXPR [ (1, _2, _356) (-1, _367) 0 ]
EXPR [ (1, _3, _356) (-1, _368) 0 ]
EXPR [ (-1, _366) (-1, _369) 0 ]
EXPR [ (1, _2, _357) (-1, _370) 0 ]
EXPR [ (1, _3, _357) (-1, _371) 0 ]
EXPR [ (555, _364, _366) (1, _364) (-1, _368) (-1, _370) 0 ]
EXPR [ (555, _365, _369) (1, _365) (1, _367) (-1, _371) 0 ]
EXPR [ (1, _367, _371) (-1, _366) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(364))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(364))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(372)), Simple(Witness(373)), Simple(Witness(374))]
EXPR [ (1, _2, _364) (-1, _375) 0 ]
EXPR [ (1, _3, _364) (-1, _376) 0 ]
EXPR [ (-1, _374) (-1, _377) 0 ]
EXPR [ (1, _2, _365) (-1, _378) 0 ]
EXPR [ (1, _3, _365) (-1, _379) 0 ]
EXPR [ (555, _372, _374) (1, _372) (-1, _376) (-1, _378) 0 ]
EXPR [ (555, _373, _377) (1, _373) (1, _375) (-1, _379) 0 ]
EXPR [ (1, _375, _379) (-1, _374) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(372))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(373))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(372))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(373))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(380)), Simple(Witness(381)), Simple(Witness(382))]
EXPR [ (1, _2, _372) (-1, _383) 0 ]
EXPR [ (1, _3, _372) (-1, _384) 0 ]
EXPR [ (-1, _382) (-1, _385) 0 ]
EXPR [ (1, _2, _373) (-1, _386) 0 ]
EXPR [ (1, _3, _373) (-1, _387) 0 ]
EXPR [ (555, _380, _382) (1, _380) (-1, _384) (-1, _386) 0 ]
EXPR [ (555, _381, _385) (1, _381) (1, _383) (-1, _387) 0 ]
EXPR [ (1, _383, _387) (-1, _382) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(380))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(381))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(380))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(381))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(388)), Simple(Witness(389)), Simple(Witness(390))]
EXPR [ (1, _2, _380) (-1, _391) 0 ]
EXPR [ (1, _3, _380) (-1, _392) 0 ]
EXPR [ (-1, _390) (-1, _393) 0 ]
EXPR [ (1, _2, _381) (-1, _394) 0 ]
EXPR [ (1, _3, _381) (-1, _395) 0 ]
EXPR [ (555, _388, _390) (1, _388) (-1, _392) (-1, _394) 0 ]
EXPR [ (555, _389, _393) (1, _389) (1, _391) (-1, _395) 0 ]
EXPR [ (1, _391, _395) (-1, _390) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(388))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(389))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(388))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(389))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(396)), Simple(Witness(397)), Simple(Witness(398))]
EXPR [ (1, _2, _388) (-1, _399) 0 ]
EXPR [ (1, _3, _388) (-1, _400) 0 ]
EXPR [ (-1, _398) (-1, _401) 0 ]
EXPR [ (1, _2, _389) (-1, _402) 0 ]
EXPR [ (1, _3, _389) (-1, _403) 0 ]
EXPR [ (555, _396, _398) (1, _396) (-1, _400) (-1, _402) 0 ]
EXPR [ (555, _397, _401) (1, _397) (1, _399) (-1, _403) 0 ]
EXPR [ (1, _399, _403) (-1, _398) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(396))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(397))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(396))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(397))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(404)), Simple(Witness(405)), Simple(Witness(406))]
EXPR [ (1, _2, _396) (-1, _407) 0 ]
EXPR [ (1, _3, _396) (-1, _408) 0 ]
EXPR [ (-1, _406) (-1, _409) 0 ]
EXPR [ (1, _2, _397) (-1, _410) 0 ]
EXPR [ (1, _3, _397) (-1, _411) 0 ]
EXPR [ (555, _404, _406) (1, _404) (-1, _408) (-1, _410) 0 ]
EXPR [ (555, _405, _409) (1, _405) (1, _407) (-1, _411) 0 ]
EXPR [ (1, _407, _411) (-1, _406) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(404))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(405))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(404))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(405))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(412)), Simple(Witness(413)), Simple(Witness(414))]
EXPR [ (1, _2, _404) (-1, _415) 0 ]
EXPR [ (1, _3, _404) (-1, _416) 0 ]
EXPR [ (-1, _414) (-1, _417) 0 ]
EXPR [ (1, _2, _405) (-1, _418) 0 ]
EXPR [ (1, _3, _405) (-1, _419) 0 ]
EXPR [ (555, _412, _414) (1, _412) (-1, _416) (-1, _418) 0 ]
EXPR [ (555, _413, _417) (1, _413) (1, _415) (-1, _419) 0 ]
EXPR [ (1, _415, _419) (-1, _414) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(412))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(413))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(412))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(413))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(420)), Simple(Witness(421)), Simple(Witness(422))]
EXPR [ (1, _2, _412) (-1, _423) 0 ]
EXPR [ (1, _3, _412) (-1, _424) 0 ]
EXPR [ (-1, _422) (-1, _425) 0 ]
EXPR [ (1, _2, _413) (-1, _426) 0 ]
EXPR [ (1, _3, _413) (-1, _427) 0 ]
EXPR [ (555, _420, _422) (1, _420) (-1, _424) (-1, _426) 0 ]
EXPR [ (555, _421, _425) (1, _421) (1, _423) (-1, _427) 0 ]
EXPR [ (1, _423, _427) (-1, _422) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(420))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(421))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(420))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(421))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(428)), Simple(Witness(429)), Simple(Witness(430))]
EXPR [ (1, _2, _420) (-1, _431) 0 ]
EXPR [ (1, _3, _420) (-1, _432) 0 ]
EXPR [ (-1, _430) (-1, _433) 0 ]
EXPR [ (1, _2, _421) (-1, _434) 0 ]
EXPR [ (1, _3, _421) (-1, _435) 0 ]
EXPR [ (555, _428, _430) (1, _428) (-1, _432) (-1, _434) 0 ]
EXPR [ (555, _429, _433) (1, _429) (1, _431) (-1, _435) 0 ]
EXPR [ (1, _431, _435) (-1, _430) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(428))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(429))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(428))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(429))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(436)), Simple(Witness(437)), Simple(Witness(438))]
EXPR [ (1, _2, _428) (-1, _439) 0 ]
EXPR [ (1, _3, _428) (-1, _440) 0 ]
EXPR [ (-1, _438) (-1, _441) 0 ]
EXPR [ (1, _2, _429) (-1, _442) 0 ]
EXPR [ (1, _3, _429) (-1, _443) 0 ]
EXPR [ (555, _436, _438) (1, _436) (-1, _440) (-1, _442) 0 ]
EXPR [ (555, _437, _441) (1, _437) (1, _439) (-1, _443) 0 ]
EXPR [ (1, _439, _443) (-1, _438) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(436))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(437))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(436))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(437))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(444)), Simple(Witness(445)), Simple(Witness(446))]
EXPR [ (1, _2, _436) (-1, _447) 0 ]
EXPR [ (1, _3, _436) (-1, _448) 0 ]
EXPR [ (-1, _446) (-1, _449) 0 ]
EXPR [ (1, _2, _437) (-1, _450) 0 ]
EXPR [ (1, _3, _437) (-1, _451) 0 ]
EXPR [ (555, _444, _446) (1, _444) (-1, _448) (-1, _450) 0 ]
EXPR [ (555, _445, _449) (1, _445) (1, _447) (-1, _451) 0 ]
EXPR [ (1, _447, _451) (-1, _446) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(444))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(444))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(452)), Simple(Witness(453)), Simple(Witness(454))]
EXPR [ (1, _2, _444) (-1, _455) 0 ]
EXPR [ (1, _3, _444) (-1, _456) 0 ]
EXPR [ (-1, _454) (-1, _457) 0 ]
EXPR [ (1, _2, _445) (-1, _458) 0 ]
EXPR [ (1, _3, _445) (-1, _459) 0 ]
EXPR [ (555, _452, _454) (1, _452) (-1, _456) (-1, _458) 0 ]
EXPR [ (555, _453, _457) (1, _453) (1, _455) (-1, _459) 0 ]
EXPR [ (1, _455, _459) (-1, _454) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(452))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(453))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(452))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(453))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(460)), Simple(Witness(461)), Simple(Witness(462))]
EXPR [ (1, _2, _452) (-1, _463) 0 ]
EXPR [ (1, _3, _452) (-1, _464) 0 ]
EXPR [ (-1, _462) (-1, _465) 0 ]
EXPR [ (1, _2, _453) (-1, _466) 0 ]
EXPR [ (1, _3, _453) (-1, _467) 0 ]
EXPR [ (555, _460, _462) (1, _460) (-1, _464) (-1, _466) 0 ]
EXPR [ (555, _461, _465) (1, _461) (1, _463) (-1, _467) 0 ]
EXPR [ (1, _463, _467) (-1, _462) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(460))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(461))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(460))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(461))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(468)), Simple(Witness(469)), Simple(Witness(470))]
EXPR [ (1, _2, _460) (-1, _471) 0 ]
EXPR [ (1, _3, _460) (-1, _472) 0 ]
EXPR [ (-1, _470) (-1, _473) 0 ]
EXPR [ (1, _2, _461) (-1, _474) 0 ]
EXPR [ (1, _3, _461) (-1, _475) 0 ]
EXPR [ (555, _468, _470) (1, _468) (-1, _472) (-1, _474) 0 ]
EXPR [ (555, _469, _473) (1, _469) (1, _471) (-1, _475) 0 ]
EXPR [ (1, _471, _475) (-1, _470) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(468))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(469))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(468))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(469))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(476)), Simple(Witness(477)), Simple(Witness(478))]
EXPR [ (1, _2, _468) (-1, _479) 0 ]
EXPR [ (1, _3, _468) (-1, _480) 0 ]
EXPR [ (-1, _478) (-1, _481) 0 ]
EXPR [ (1, _2, _469) (-1, _482) 0 ]
EXPR [ (1, _3, _469) (-1, _483) 0 ]
EXPR [ (555, _476, _478) (1, _476) (-1, _480) (-1, _482) 0 ]
EXPR [ (555, _477, _481) (1, _477) (1, _479) (-1, _483) 0 ]
EXPR [ (1, _479, _483) (-1, _478) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(476))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(477))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(476))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(477))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(484)), Simple(Witness(485)), Simple(Witness(486))]
EXPR [ (1, _2, _476) (-1, _487) 0 ]
EXPR [ (1, _3, _476) (-1, _488) 0 ]
EXPR [ (-1, _486) (-1, _489) 0 ]
EXPR [ (1, _2, _477) (-1, _490) 0 ]
EXPR [ (1, _3, _477) (-1, _491) 0 ]
EXPR [ (555, _484, _486) (1, _484) (-1, _488) (-1, _490) 0 ]
EXPR [ (555, _485, _489) (1, _485) (1, _487) (-1, _491) 0 ]
EXPR [ (1, _487, _491) (-1, _486) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(484))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(485))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(484))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(485))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(492)), Simple(Witness(493)), Simple(Witness(494))]
EXPR [ (1, _2, _484) (-1, _495) 0 ]
EXPR [ (1, _3, _484) (-1, _496) 0 ]
EXPR [ (-1, _494) (-1, _497) 0 ]
EXPR [ (1, _2, _485) (-1, _498) 0 ]
EXPR [ (1, _3, _485) (-1, _499) 0 ]
EXPR [ (555, _492, _494) (1, _492) (-1, _496) (-1, _498) 0 ]
EXPR [ (555, _493, _497) (1, _493) (1, _495) (-1, _499) 0 ]
EXPR [ (1, _495, _499) (-1, _494) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(492))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(493))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(492))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(493))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(500)), Simple(Witness(501)), Simple(Witness(502))]
EXPR [ (1, _2, _492) (-1, _503) 0 ]
EXPR [ (1, _3, _492) (-1, _504) 0 ]
EXPR [ (-1, _502) (-1, _505) 0 ]
EXPR [ (1, _2, _493) (-1, _506) 0 ]
EXPR [ (1, _3, _493) (-1, _507) 0 ]
EXPR [ (555, _500, _502) (1, _500) (-1, _504) (-1, _506) 0 ]
EXPR [ (555, _501, _505) (1, _501) (1, _503) (-1, _507) 0 ]
EXPR [ (1, _503, _507) (-1, _502) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(500))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(501))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(500))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(501))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(508)), Simple(Witness(509)), Simple(Witness(510))]
EXPR [ (1, _2, _500) (-1, _511) 0 ]
EXPR [ (1, _3, _500) (-1, _512) 0 ]
EXPR [ (-1, _510) (-1, _513) 0 ]
EXPR [ (1, _2, _501) (-1, _514) 0 ]
EXPR [ (1, _3, _501) (-1, _515) 0 ]
EXPR [ (555, _508, _510) (1, _508) (-1, _512) (-1, _514) 0 ]
EXPR [ (555, _509, _513) (1, _509) (1, _511) (-1, _515) 0 ]
EXPR [ (1, _511, _515) (-1, _510) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(508))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(509))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(508))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(509))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(516)), Simple(Witness(517)), Simple(Witness(518))]
EXPR [ (1, _2, _508) (-1, _519) 0 ]
EXPR [ (1, _3, _508) (-1, _520) 0 ]
EXPR [ (-1, _518) (-1, _521) 0 ]
EXPR [ (1, _2, _509) (-1, _522) 0 ]
EXPR [ (1, _3, _509) (-1, _523) 0 ]
EXPR [ (555, _516, _518) (1, _516) (-1, _520) (-1, _522) 0 ]
EXPR [ (555, _517, _521) (1, _517) (1, _519) (-1, _523) 0 ]
EXPR [ (1, _519, _523) (-1, _518) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(516))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(517))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(516))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(517))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(524)), Simple(Witness(525)), Simple(Witness(526))]
EXPR [ (1, _2, _516) (-1, _527) 0 ]
EXPR [ (1, _3, _516) (-1, _528) 0 ]
EXPR [ (-1, _526) (-1, _529) 0 ]
EXPR [ (1, _2, _517) (-1, _530) 0 ]
EXPR [ (1, _3, _517) (-1, _531) 0 ]
EXPR [ (555, _524, _526) (1, _524) (-1, _528) (-1, _530) 0 ]
EXPR [ (555, _525, _529) (1, _525) (1, _527) (-1, _531) 0 ]
EXPR [ (1, _527, _531) (-1, _526) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(524))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(525))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(524))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(525))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(532)), Simple(Witness(533)), Simple(Witness(534))]
EXPR [ (1, _2, _524) (-1, _535) 0 ]
EXPR [ (1, _3, _524) (-1, _536) 0 ]
EXPR [ (-1, _534) (-1, _537) 0 ]
EXPR [ (1, _2, _525) (-1, _538) 0 ]
EXPR [ (1, _3, _525) (-1, _539) 0 ]
EXPR [ (555, _532, _534) (1, _532) (-1, _536) (-1, _538) 0 ]
EXPR [ (555, _533, _537) (1, _533) (1, _535) (-1, _539) 0 ]
EXPR [ (1, _535, _539) (-1, _534) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(532))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(533))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(532))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(533))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(540)), Simple(Witness(541)), Simple(Witness(542))]
EXPR [ (1, _2, _532) (-1, _543) 0 ]
EXPR [ (1, _3, _532) (-1, _544) 0 ]
EXPR [ (-1, _542) (-1, _545) 0 ]
EXPR [ (1, _2, _533) (-1, _546) 0 ]
EXPR [ (1, _3, _533) (-1, _547) 0 ]
EXPR [ (555, _540, _542) (1, _540) (-1, _544) (-1, _546) 0 ]
EXPR [ (555, _541, _545) (1, _541) (1, _543) (-1, _547) 0 ]
EXPR [ (1, _543, _547) (-1, _542) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(540))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(541))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(540))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(541))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(548)), Simple(Witness(549)), Simple(Witness(550))]
EXPR [ (1, _2, _540) (-1, _551) 0 ]
EXPR [ (1, _3, _540) (-1, _552) 0 ]
EXPR [ (-1, _550) (-1, _553) 0 ]
EXPR [ (1, _2, _541) (-1, _554) 0 ]
EXPR [ (1, _3, _541) (-1, _555) 0 ]
EXPR [ (555, _548, _550) (1, _548) (-1, _552) (-1, _554) 0 ]
EXPR [ (555, _549, _553) (1, _549) (1, _551) (-1, _555) 0 ]
EXPR [ (1, _551, _555) (-1, _550) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(548))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(549))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(548))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(549))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(556)), Simple(Witness(557)), Simple(Witness(558))]
EXPR [ (1, _2, _548) (-1, _559) 0 ]
EXPR [ (1, _3, _548) (-1, _560) 0 ]
EXPR [ (-1, _558) (-1, _561) 0 ]
EXPR [ (1, _2, _549) (-1, _562) 0 ]
EXPR [ (1, _3, _549) (-1, _563) 0 ]
EXPR [ (555, _556, _558) (1, _556) (-1, _560) (-1, _562) 0 ]
EXPR [ (555, _557, _561) (1, _557) (1, _559) (-1, _563) 0 ]
EXPR [ (1, _559, _563) (-1, _558) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(556))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(557))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(556))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(557))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(564)), Simple(Witness(565)), Simple(Witness(566))]
EXPR [ (1, _2, _556) (-1, _567) 0 ]
EXPR [ (1, _3, _556) (-1, _568) 0 ]
EXPR [ (-1, _566) (-1, _569) 0 ]
EXPR [ (1, _2, _557) (-1, _570) 0 ]
EXPR [ (1, _3, _557) (-1, _571) 0 ]
EXPR [ (555, _564, _566) (1, _564) (-1, _568) (-1, _570) 0 ]
EXPR [ (555, _565, _569) (1, _565) (1, _567) (-1, _571) 0 ]
EXPR [ (1, _567, _571) (-1, _566) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(564))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(565))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(564))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(565))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(572)), Simple(Witness(573)), Simple(Witness(574))]
EXPR [ (1, _2, _564) (-1, _575) 0 ]
EXPR [ (1, _3, _564) (-1, _576) 0 ]
EXPR [ (-1, _574) (-1, _577) 0 ]
EXPR [ (1, _2, _565) (-1, _578) 0 ]
EXPR [ (1, _3, _565) (-1, _579) 0 ]
EXPR [ (555, _572, _574) (1, _572) (-1, _576) (-1, _578) 0 ]
EXPR [ (555, _573, _577) (1, _573) (1, _575) (-1, _579) 0 ]
EXPR [ (1, _575, _579) (-1, _574) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(572))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(573))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(572))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(573))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(580)), Simple(Witness(581)), Simple(Witness(582))]
EXPR [ (1, _2, _572) (-1, _583) 0 ]
EXPR [ (1, _3, _572) (-1, _584) 0 ]
EXPR [ (-1, _582) (-1, _585) 0 ]
EXPR [ (1, _2, _573) (-1, _586) 0 ]
EXPR [ (1, _3, _573) (-1, _587) 0 ]
EXPR [ (555, _580, _582) (1, _580) (-1, _584) (-1, _586) 0 ]
EXPR [ (555, _581, _585) (1, _581) (1, _583) (-1, _587) 0 ]
EXPR [ (1, _583, _587) (-1, _582) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(580))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(581))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(580))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(581))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(588)), Simple(Witness(589)), Simple(Witness(590))]
EXPR [ (1, _2, _580) (-1, _591) 0 ]
EXPR [ (1, _3, _580) (-1, _592) 0 ]
EXPR [ (-1, _590) (-1, _593) 0 ]
EXPR [ (1, _2, _581) (-1, _594) 0 ]
EXPR [ (1, _3, _581) (-1, _595) 0 ]
EXPR [ (555, _588, _590) (1, _588) (-1, _592) (-1, _594) 0 ]
EXPR [ (555, _589, _593) (1, _589) (1, _591) (-1, _595) 0 ]
EXPR [ (1, _591, _595) (-1, _590) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(588))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(589))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(588))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(589))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(596)), Simple(Witness(597)), Simple(Witness(598))]
EXPR [ (1, _2, _588) (-1, _599) 0 ]
EXPR [ (1, _3, _588) (-1, _600) 0 ]
EXPR [ (-1, _598) (-1, _601) 0 ]
EXPR [ (1, _2, _589) (-1, _602) 0 ]
EXPR [ (1, _3, _589) (-1, _603) 0 ]
EXPR [ (555, _596, _598) (1, _596) (-1, _600) (-1, _602) 0 ]
EXPR [ (555, _597, _601) (1, _597) (1, _599) (-1, _603) 0 ]
EXPR [ (1, _599, _603) (-1, _598) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(596))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(597))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(596))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(597))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(604)), Simple(Witness(605)), Simple(Witness(606))]
EXPR [ (1, _2, _596) (-1, _607) 0 ]
EXPR [ (1, _3, _596) (-1, _608) 0 ]
EXPR [ (-1, _606) (-1, _609) 0 ]
EXPR [ (1, _2, _597) (-1, _610) 0 ]
EXPR [ (1, _3, _597) (-1, _611) 0 ]
EXPR [ (555, _604, _606) (1, _604) (-1, _608) (-1, _610) 0 ]
EXPR [ (555, _605, _609) (1, _605) (1, _607) (-1, _611) 0 ]
EXPR [ (1, _607, _611) (-1, _606) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(604))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(605))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(604))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(605))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(612)), Simple(Witness(613)), Simple(Witness(614))]
EXPR [ (1, _2, _604) (-1, _615) 0 ]
EXPR [ (1, _3, _604) (-1, _616) 0 ]
EXPR [ (-1, _614) (-1, _617) 0 ]
EXPR [ (1, _2, _605) (-1, _618) 0 ]
EXPR [ (1, _3, _605) (-1, _619) 0 ]
EXPR [ (555, _612, _614) (1, _612) (-1, _616) (-1, _618) 0 ]
EXPR [ (555, _613, _617) (1, _613) (1, _615) (-1, _619) 0 ]
EXPR [ (1, _615, _619) (-1, _614) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(612))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(613))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(612))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(613))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(620)), Simple(Witness(621)), Simple(Witness(622))]
EXPR [ (1, _2, _612) (-1, _623) 0 ]
EXPR [ (1, _3, _612) (-1, _624) 0 ]
EXPR [ (-1, _622) (-1, _625) 0 ]
EXPR [ (1, _2, _613) (-1, _626) 0 ]
EXPR [ (1, _3, _613) (-1, _627) 0 ]
EXPR [ (555, _620, _622) (1, _620) (-1, _624) (-1, _626) 0 ]
EXPR [ (555, _621, _625) (1, _621) (1, _623) (-1, _627) 0 ]
EXPR [ (1, _623, _627) (-1, _622) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(620))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(621))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(620))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(621))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(628)), Simple(Witness(629)), Simple(Witness(630))]
EXPR [ (1, _2, _620) (-1, _631) 0 ]
EXPR [ (1, _3, _620) (-1, _632) 0 ]
EXPR [ (-1, _630) (-1, _633) 0 ]
EXPR [ (1, _2, _621) (-1, _634) 0 ]
EXPR [ (1, _3, _621) (-1, _635) 0 ]
EXPR [ (555, _628, _630) (1, _628) (-1, _632) (-1, _634) 0 ]
EXPR [ (555, _629, _633) (1, _629) (1, _631) (-1, _635) 0 ]
EXPR [ (1, _631, _635) (-1, _630) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(628))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(629))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(628))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(629))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(636)), Simple(Witness(637)), Simple(Witness(638))]
EXPR [ (1, _2, _628) (-1, _639) 0 ]
EXPR [ (1, _3, _628) (-1, _640) 0 ]
EXPR [ (-1, _638) (-1, _641) 0 ]
EXPR [ (1, _2, _629) (-1, _642) 0 ]
EXPR [ (1, _3, _629) (-1, _643) 0 ]
EXPR [ (555, _636, _638) (1, _636) (-1, _640) (-1, _642) 0 ]
EXPR [ (555, _637, _641) (1, _637) (1, _639) (-1, _643) 0 ]
EXPR [ (1, _639, _643) (-1, _638) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(636))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(637))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(636))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(637))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(644)), Simple(Witness(645)), Simple(Witness(646))]
EXPR [ (1, _2, _636) (-1, _647) 0 ]
EXPR [ (1, _3, _636) (-1, _648) 0 ]
EXPR [ (-1, _646) (-1, _649) 0 ]
EXPR [ (1, _2, _637) (-1, _650) 0 ]
EXPR [ (1, _3, _637) (-1, _651) 0 ]
EXPR [ (555, _644, _646) (1, _644) (-1, _648) (-1, _650) 0 ]
EXPR [ (555, _645, _649) (1, _645) (1, _647) (-1, _651) 0 ]
EXPR [ (1, _647, _651) (-1, _646) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(644))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(645))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(644))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(645))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(652)), Simple(Witness(653)), Simple(Witness(654))]
EXPR [ (1, _2, _644) (-1, _655) 0 ]
EXPR [ (1, _3, _644) (-1, _656) 0 ]
EXPR [ (-1, _654) (-1, _657) 0 ]
EXPR [ (1, _2, _645) (-1, _658) 0 ]
EXPR [ (1, _3, _645) (-1, _659) 0 ]
EXPR [ (555, _652, _654) (1, _652) (-1, _656) (-1, _658) 0 ]
EXPR [ (555, _653, _657) (1, _653) (1, _655) (-1, _659) 0 ]
EXPR [ (1, _655, _659) (-1, _654) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(652))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(653))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(652))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(653))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(660)), Simple(Witness(661)), Simple(Witness(662))]
EXPR [ (1, _2, _652) (-1, _663) 0 ]
EXPR [ (1, _3, _652) (-1, _664) 0 ]
EXPR [ (-1, _662) (-1, _665) 0 ]
EXPR [ (1, _2, _653) (-1, _666) 0 ]
EXPR [ (1, _3, _653) (-1, _667) 0 ]
EXPR [ (555, _660, _662) (1, _660) (-1, _664) (-1, _666) 0 ]
EXPR [ (555, _661, _665) (1, _661) (1, _663) (-1, _667) 0 ]
EXPR [ (1, _663, _667) (-1, _662) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(660))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(661))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(660))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(661))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(668)), Simple(Witness(669)), Simple(Witness(670))]
EXPR [ (1, _2, _660) (-1, _671) 0 ]
EXPR [ (1, _3, _660) (-1, _672) 0 ]
EXPR [ (-1, _670) (-1, _673) 0 ]
EXPR [ (1, _2, _661) (-1, _674) 0 ]
EXPR [ (1, _3, _661) (-1, _675) 0 ]
EXPR [ (555, _668, _670) (1, _668) (-1, _672) (-1, _674) 0 ]
EXPR [ (555, _669, _673) (1, _669) (1, _671) (-1, _675) 0 ]
EXPR [ (1, _671, _675) (-1, _670) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(668))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(669))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(668))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(669))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(676)), Simple(Witness(677)), Simple(Witness(678))]
EXPR [ (1, _2, _668) (-1, _679) 0 ]
EXPR [ (1, _3, _668) (-1, _680) 0 ]
EXPR [ (-1, _678) (-1, _681) 0 ]
EXPR [ (1, _2, _669) (-1, _682) 0 ]
EXPR [ (1, _3, _669) (-1, _683) 0 ]
EXPR [ (555, _676, _678) (1, _676) (-1, _680) (-1, _682) 0 ]
EXPR [ (555, _677, _681) (1, _677) (1, _679) (-1, _683) 0 ]
EXPR [ (1, _679, _683) (-1, _678) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(676))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(677))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(676))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(677))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(684)), Simple(Witness(685)), Simple(Witness(686))]
EXPR [ (1, _2, _676) (-1, _687) 0 ]
EXPR [ (1, _3, _676) (-1, _688) 0 ]
EXPR [ (-1, _686) (-1, _689) 0 ]
EXPR [ (1, _2, _677) (-1, _690) 0 ]
EXPR [ (1, _3, _677) (-1, _691) 0 ]
EXPR [ (555, _684, _686) (1, _684) (-1, _688) (-1, _690) 0 ]
EXPR [ (555, _685, _689) (1, _685) (1, _687) (-1, _691) 0 ]
EXPR [ (1, _687, _691) (-1, _686) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(684))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(685))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(684))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(685))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(692)), Simple(Witness(693)), Simple(Witness(694))]
EXPR [ (1, _2, _684) (-1, _695) 0 ]
EXPR [ (1, _3, _684) (-1, _696) 0 ]
EXPR [ (-1, _694) (-1, _697) 0 ]
EXPR [ (1, _2, _685) (-1, _698) 0 ]
EXPR [ (1, _3, _685) (-1, _699) 0 ]
EXPR [ (555, _692, _694) (1, _692) (-1, _696) (-1, _698) 0 ]
EXPR [ (555, _693, _697) (1, _693) (1, _695) (-1, _699) 0 ]
EXPR [ (1, _695, _699) (-1, _694) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(692))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(693))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(692))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(693))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(700)), Simple(Witness(701)), Simple(Witness(702))]
EXPR [ (1, _2, _692) (-1, _703) 0 ]
EXPR [ (1, _3, _692) (-1, _704) 0 ]
EXPR [ (-1, _702) (-1, _705) 0 ]
EXPR [ (1, _2, _693) (-1, _706) 0 ]
EXPR [ (1, _3, _693) (-1, _707) 0 ]
EXPR [ (555, _700, _702) (1, _700) (-1, _704) (-1, _706) 0 ]
EXPR [ (555, _701, _705) (1, _701) (1, _703) (-1, _707) 0 ]
EXPR [ (1, _703, _707) (-1, _702) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(700))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(701))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(700))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(701))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(708)), Simple(Witness(709)), Simple(Witness(710))]
EXPR [ (1, _2, _700) (-1, _711) 0 ]
EXPR [ (1, _3, _700) (-1, _712) 0 ]
EXPR [ (-1, _710) (-1, _713) 0 ]
EXPR [ (1, _2, _701) (-1, _714) 0 ]
EXPR [ (1, _3, _701) (-1, _715) 0 ]
EXPR [ (555, _708, _710) (1, _708) (-1, _712) (-1, _714) 0 ]
EXPR [ (555, _709, _713) (1, _709) (1, _711) (-1, _715) 0 ]
EXPR [ (1, _711, _715) (-1, _710) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(708))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(709))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(708))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(709))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(716)), Simple(Witness(717)), Simple(Witness(718))]
EXPR [ (1, _2, _708) (-1, _719) 0 ]
EXPR [ (1, _3, _708) (-1, _720) 0 ]
EXPR [ (-1, _718) (-1, _721) 0 ]
EXPR [ (1, _2, _709) (-1, _722) 0 ]
EXPR [ (1, _3, _709) (-1, _723) 0 ]
EXPR [ (555, _716, _718) (1, _716) (-1, _720) (-1, _722) 0 ]
EXPR [ (555, _717, _721) (1, _717) (1, _719) (-1, _723) 0 ]
EXPR [ (1, _719, _723) (-1, _718) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(716))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(717))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(716))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(717))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(724)), Simple(Witness(725)), Simple(Witness(726))]
EXPR [ (1, _2, _716) (-1, _727) 0 ]
EXPR [ (1, _3, _716) (-1, _728) 0 ]
EXPR [ (-1, _726) (-1, _729) 0 ]
EXPR [ (1, _2, _717) (-1, _730) 0 ]
EXPR [ (1, _3, _717) (-1, _731) 0 ]
EXPR [ (555, _724, _726) (1, _724) (-1, _728) (-1, _730) 0 ]
EXPR [ (555, _725, _729) (1, _725) (1, _727) (-1, _731) 0 ]
EXPR [ (1, _727, _731) (-1, _726) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(724))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(725))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(724))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(725))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(732)), Simple(Witness(733)), Simple(Witness(734))]
EXPR [ (1, _2, _724) (-1, _735) 0 ]
EXPR [ (1, _3, _724) (-1, _736) 0 ]
EXPR [ (-1, _734) (-1, _737) 0 ]
EXPR [ (1, _2, _725) (-1, _738) 0 ]
EXPR [ (1, _3, _725) (-1, _739) 0 ]
EXPR [ (555, _732, _734) (1, _732) (-1, _736) (-1, _738) 0 ]
EXPR [ (555, _733, _737) (1, _733) (1, _735) (-1, _739) 0 ]
EXPR [ (1, _735, _739) (-1, _734) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(732))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(733))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(732))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(733))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(740)), Simple(Witness(741)), Simple(Witness(742))]
EXPR [ (1, _2, _732) (-1, _743) 0 ]
EXPR [ (1, _3, _732) (-1, _744) 0 ]
EXPR [ (-1, _742) (-1, _745) 0 ]
EXPR [ (1, _2, _733) (-1, _746) 0 ]
EXPR [ (1, _3, _733) (-1, _747) 0 ]
EXPR [ (555, _740, _742) (1, _740) (-1, _744) (-1, _746) 0 ]
EXPR [ (555, _741, _745) (1, _741) (1, _743) (-1, _747) 0 ]
EXPR [ (1, _743, _747) (-1, _742) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(740))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(741))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(740))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(741))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(748)), Simple(Witness(749)), Simple(Witness(750))]
EXPR [ (1, _2, _740) (-1, _751) 0 ]
EXPR [ (1, _3, _740) (-1, _752) 0 ]
EXPR [ (-1, _750) (-1, _753) 0 ]
EXPR [ (1, _2, _741) (-1, _754) 0 ]
EXPR [ (1, _3, _741) (-1, _755) 0 ]
EXPR [ (555, _748, _750) (1, _748) (-1, _752) (-1, _754) 0 ]
EXPR [ (555, _749, _753) (1, _749) (1, _751) (-1, _755) 0 ]
EXPR [ (1, _751, _755) (-1, _750) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(748))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(749))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(748))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(749))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(756)), Simple(Witness(757)), Simple(Witness(758))]
EXPR [ (1, _2, _748) (-1, _759) 0 ]
EXPR [ (1, _3, _748) (-1, _760) 0 ]
EXPR [ (-1, _758) (-1, _761) 0 ]
EXPR [ (1, _2, _749) (-1, _762) 0 ]
EXPR [ (1, _3, _749) (-1, _763) 0 ]
EXPR [ (555, _756, _758) (1, _756) (-1, _760) (-1, _762) 0 ]
EXPR [ (555, _757, _761) (1, _757) (1, _759) (-1, _763) 0 ]
EXPR [ (1, _759, _763) (-1, _758) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(756))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(757))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(756))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(757))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(764)), Simple(Witness(765)), Simple(Witness(766))]
EXPR [ (1, _2, _756) (-1, _767) 0 ]
EXPR [ (1, _3, _756) (-1, _768) 0 ]
EXPR [ (-1, _766) (-1, _769) 0 ]
EXPR [ (1, _2, _757) (-1, _770) 0 ]
EXPR [ (1, _3, _757) (-1, _771) 0 ]
EXPR [ (555, _764, _766) (1, _764) (-1, _768) (-1, _770) 0 ]
EXPR [ (555, _765, _769) (1, _765) (1, _767) (-1, _771) 0 ]
EXPR [ (1, _767, _771) (-1, _766) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(764))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(765))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(764))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(765))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(772)), Simple(Witness(773)), Simple(Witness(774))]
EXPR [ (1, _2, _764) (-1, _775) 0 ]
EXPR [ (1, _3, _764) (-1, _776) 0 ]
EXPR [ (-1, _774) (-1, _777) 0 ]
EXPR [ (1, _2, _765) (-1, _778) 0 ]
EXPR [ (1, _3, _765) (-1, _779) 0 ]
EXPR [ (555, _772, _774) (1, _772) (-1, _776) (-1, _778) 0 ]
EXPR [ (555, _773, _777) (1, _773) (1, _775) (-1, _779) 0 ]
EXPR [ (1, _775, _779) (-1, _774) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(772))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(773))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(772))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(773))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(780)), Simple(Witness(781)), Simple(Witness(782))]
EXPR [ (1, _2, _772) (-1, _783) 0 ]
EXPR [ (1, _3, _772) (-1, _784) 0 ]
EXPR [ (-1, _782) (-1, _785) 0 ]
EXPR [ (1, _2, _773) (-1, _786) 0 ]
EXPR [ (1, _3, _773) (-1, _787) 0 ]
EXPR [ (555, _780, _782) (1, _780) (-1, _784) (-1, _786) 0 ]
EXPR [ (555, _781, _785) (1, _781) (1, _783) (-1, _787) 0 ]
EXPR [ (1, _783, _787) (-1, _782) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(780))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(781))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(780))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(781))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(788)), Simple(Witness(789)), Simple(Witness(790))]
EXPR [ (1, _2, _780) (-1, _791) 0 ]
EXPR [ (1, _3, _780) (-1, _792) 0 ]
EXPR [ (-1, _790) (-1, _793) 0 ]
EXPR [ (1, _2, _781) (-1, _794) 0 ]
EXPR [ (1, _3, _781) (-1, _795) 0 ]
EXPR [ (555, _788, _790) (1, _788) (-1, _792) (-1, _794) 0 ]
EXPR [ (555, _789, _793) (1, _789) (1, _791) (-1, _795) 0 ]
EXPR [ (1, _791, _795) (-1, _790) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(788))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(789))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(788))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(789))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(796)), Simple(Witness(797)), Simple(Witness(798))]
EXPR [ (1, _2, _788) (-1, _799) 0 ]
EXPR [ (1, _3, _788) (-1, _800) 0 ]
EXPR [ (-1, _798) (-1, _801) 0 ]
EXPR [ (1, _2, _789) (-1, _802) 0 ]
EXPR [ (1, _3, _789) (-1, _803) 0 ]
EXPR [ (555, _796, _798) (1, _796) (-1, _800) (-1, _802) 0 ]
EXPR [ (555, _797, _801) (1, _797) (1, _799) (-1, _803) 0 ]
EXPR [ (1, _799, _803) (-1, _798) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(796))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(797))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(796))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(797))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(804)), Simple(Witness(805)), Simple(Witness(806))]
EXPR [ (1, _2, _796) (-1, _807) 0 ]
EXPR [ (1, _3, _796) (-1, _808) 0 ]
EXPR [ (-1, _806) (-1, _809) 0 ]
EXPR [ (1, _2, _797) (-1, _810) 0 ]
EXPR [ (1, _3, _797) (-1, _811) 0 ]
EXPR [ (555, _804, _806) (1, _804) (-1, _808) (-1, _810) 0 ]
EXPR [ (555, _805, _809) (1, _805) (1, _807) (-1, _811) 0 ]
EXPR [ (1, _807, _811) (-1, _806) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(804))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(805))], q_c: 0 })], outputs: []

unconstrained func 0
[Const { destination: MemoryAddress(0), bit_size: 64, value: 1031 }, CalldataCopy { destination_address: MemoryAddress(1024), size: 4, offset: 0 }, Mov { destination: MemoryAddress(2), source: MemoryAddress(1024) }, Mov { destination: MemoryAddress(3), source: MemoryAddress(1025) }, Mov { destination: MemoryAddress(4), source: MemoryAddress(1026) }, Mov { destination: MemoryAddress(5), source: MemoryAddress(1027) }, Call { location: 11 }, Mov { destination: MemoryAddress(1028), source: MemoryAddress(2) }, Mov { destination: MemoryAddress(1029), source: MemoryAddress(3) }, Mov { destination: MemoryAddress(1030), source: MemoryAddress(4) }, Stop { return_data_offset: 1028, return_data_size: 3 }, BinaryFieldOp { destination: MemoryAddress(6), op: Mul, lhs: MemoryAddress(4), rhs: MemoryAddress(5) }, BinaryFieldOp { destination: MemoryAddress(7), op: Mul, lhs: MemoryAddress(6), rhs: MemoryAddress(2) }, BinaryFieldOp { destination: MemoryAddress(8), op: Mul, lhs: MemoryAddress(7), rhs: MemoryAddress(3) }, BinaryFieldOp { destination: MemoryAddress(7), op: Mul, lhs: MemoryAddress(2), rhs: MemoryAddress(3) }, BinaryFieldOp { destination: MemoryAddress(9), op: Sub, lhs: MemoryAddress(7), rhs: MemoryAddress(6) }, Const { destination: MemoryAddress(7), bit_size: 254, value: 555 }, BinaryFieldOp { destination: MemoryAddress(6), op: Mul, lhs: MemoryAddress(8), rhs: MemoryAddress(7) }, Const { destination: MemoryAddress(11), bit_size: 254, value: 1 }, BinaryFieldOp { destination: MemoryAddress(10), op: Sub, lhs: MemoryAddress(6), rhs: MemoryAddress(11) }, BinaryFieldOp { destination: MemoryAddress(12), op: Div, lhs: MemoryAddress(9), rhs: MemoryAddress(10) }, BinaryFieldOp { destination: MemoryAddress(9), op: Mul, lhs: MemoryAddress(2), rhs: MemoryAddress(5) }, BinaryFieldOp { destination: MemoryAddress(10), op: Mul, lhs: MemoryAddress(4), rhs: MemoryAddress(3) }, BinaryFieldOp { destination: MemoryAddress(13), op: Add, lhs: MemoryAddress(9), rhs: MemoryAddress(10) }, BinaryFieldOp { destination: MemoryAddress(9), op: Add, lhs: MemoryAddress(6), rhs: MemoryAddress(11) }, BinaryFieldOp { destination: MemoryAddress(6), op: Div, lhs: MemoryAddress(13), rhs: MemoryAddress(9) }, Mov { destination: MemoryAddress(9), source: MemoryAddress(6) }, Mov { destination: MemoryAddress(13), source: MemoryAddress(12) }, Mov { destination: MemoryAddress(10), source: MemoryAddress(8) }, Mov { destination: MemoryAddress(2), source: MemoryAddress(9) }, Mov { destination: MemoryAddress(3), source: MemoryAddress(13) }, Mov { destination: MemoryAddress(4), source: MemoryAddress(10) }, Return]
unconstrained func 1
[Const { destination: MemoryAddress(0), bit_size: 64, value: 1030 }, CalldataCopy { destination_address: MemoryAddress(1024), size: 6, offset: 0 }, Cast { destination: MemoryAddress(1024), source: MemoryAddress(1024), bit_size: 8 }, Cast { destination: MemoryAddress(1025), source: MemoryAddress(1025), bit_size: 8 }, Cast { destination: MemoryAddress(1026), source: MemoryAddress(1026), bit_size: 8 }, Cast { destination: MemoryAddress(1027), source: MemoryAddress(1027), bit_size: 64 }, Const { destination: MemoryAddress(2), bit_size: 64, value: 2¹⁰ }, Const { destination: MemoryAddress(3), bit_size: 64, value: 1 }, Mov { destination: MemoryAddress(4), source: MemoryAddress(1027) }, Mov { destination: MemoryAddress(5), source: MemoryAddress(1028) }, Mov { destination: MemoryAddress(6), source: MemoryAddress(1029) }, Mov { destination: MemoryAddress(7), source: MemoryAddress(2) }, Mov { destination: MemoryAddress(2), source: MemoryAddress(7) }, Call { location: 15 }, Stop { return_data_offset: 1030, return_data_size: 0 }, Const { destination: MemoryAddress(7), bit_size: 1, value: 1 }, Const { destination: MemoryAddress(10), bit_size: 64, value: 89 }, Mov { destination: MemoryAddress(8), source: MemoryAddress(0) }, BinaryIntOp { destination: MemoryAddress(0), op: Add, bit_size: 64, lhs: MemoryAddress(0), rhs: MemoryAddress(10) }, Const { destination: MemoryAddress(9), bit_size: 64, value: 1 }, Const { destination: MemoryAddress(10), bit_size: 64, value: 0 }, Const { destination: MemoryAddress(11), bit_size: 8, value: 123 }, BinaryIntOp { destination: MemoryAddress(12), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(12), source: MemoryAddress(11) }, Const { destination: MemoryAddress(12), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(12) }, Const { destination: MemoryAddress(12), bit_size: 8, value: 34 }, BinaryIntOp { destination: MemoryAddress(13), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(13), source: MemoryAddress(12) }, Const { destination: MemoryAddress(13), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(13) }, Const { destination: MemoryAddress(13), bit_size: 8, value: 107 }, BinaryIntOp { destination: MemoryAddress(14), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(14), source: MemoryAddress(13) }, Const { destination: MemoryAddress(14), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(14) }, Const { destination: MemoryAddress(14), bit_size: 8, value: 105 }, BinaryIntOp { destination: MemoryAddress(15), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(15), source: MemoryAddress(14) }, Const { destination: MemoryAddress(15), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(15) }, Const { destination: MemoryAddress(15), bit_size: 8, value: 110 }, BinaryIntOp { destination: MemoryAddress(16), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(16), source: MemoryAddress(15) }, Const { destination: MemoryAddress(16), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(16) }, Const { destination: MemoryAddress(16), bit_size: 8, value: 100 }, BinaryIntOp { destination: MemoryAddress(17), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(17), source: MemoryAddress(16) }, Const { destination: MemoryAddress(17), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(17) }, BinaryIntOp { destination: MemoryAddress(17), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(17), source: MemoryAddress(12) }, Const { destination: MemoryAddress(17), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(17) }, Const { destination: MemoryAddress(17), bit_size: 8, value: 58 }, BinaryIntOp { destination: MemoryAddress(18), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(18), source: MemoryAddress(17) }, Const { destination: MemoryAddress(18), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(18) }, BinaryIntOp { destination: MemoryAddress(18), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(18), source: MemoryAddress(12) }, Const { destination: MemoryAddress(18), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(18) }, Const { destination: MemoryAddress(18), bit_size: 8, value: 115 }, BinaryIntOp { destination: MemoryAddress(19), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(19), source: MemoryAddress(18) }, Const { destination: MemoryAddress(19), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(19) }, Const { destination: MemoryAddress(19), bit_size: 8, value: 116 }, BinaryIntOp { destination: MemoryAddress(20), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(20), source: MemoryAddress(19) }, Const { destination: MemoryAddress(20), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(20) }, Const { destination: MemoryAddress(20), bit_size: 8, value: 114 }, BinaryIntOp { destination: MemoryAddress(21), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(21), source: MemoryAddress(20) }, Const { destination: MemoryAddress(21), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(21) }, Const { destination: MemoryAddress(21), bit_size: 8, value: 117 }, BinaryIntOp { destination: MemoryAddress(22), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(22), source: MemoryAddress(21) }, Const { destination: MemoryAddress(22), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(22) }, Const { destination: MemoryAddress(22), bit_size: 8, value: 99 }, BinaryIntOp { destination: MemoryAddress(23), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(23), source: MemoryAddress(22) }, Const { destination: MemoryAddress(23), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(23) }, BinaryIntOp { destination: MemoryAddress(23), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(23), source: MemoryAddress(19) }, Const { destination: MemoryAddress(23), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(23) }, BinaryIntOp { destination: MemoryAddress(23), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(23), source: MemoryAddress(12) }, Const { destination: MemoryAddress(23), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(23) }, Const { destination: MemoryAddress(23), bit_size: 8, value: 44 }, BinaryIntOp { destination: MemoryAddress(24), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(24), source: MemoryAddress(23) }, Const { destination: MemoryAddress(24), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(24) }, BinaryIntOp { destination: MemoryAddress(24), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(24), source: MemoryAddress(12) }, Const { destination: MemoryAddress(24), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(24) }, BinaryIntOp { destination: MemoryAddress(24), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(24), source: MemoryAddress(15) }, Const { destination: MemoryAddress(24), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(24) }, Const { destination: MemoryAddress(24), bit_size: 8, value: 97 }, BinaryIntOp { destination: MemoryAddress(25), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(25), source: MemoryAddress(24) }, Const { destination: MemoryAddress(25), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(25) }, Const { destination: MemoryAddress(25), bit_size: 8, value: 109 }, BinaryIntOp { destination: MemoryAddress(26), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(26), source: MemoryAddress(25) }, Const { destination: MemoryAddress(26), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(26) }, Const { destination: MemoryAddress(26), bit_size: 8, value: 101 }, BinaryIntOp { destination: MemoryAddress(27), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(27), source: MemoryAddress(26) }, Const { destination: MemoryAddress(27), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(27) }, BinaryIntOp { destination: MemoryAddress(27), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(27), source: MemoryAddress(12) }, Const { destination: MemoryAddress(27), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(27) }, BinaryIntOp { destination: MemoryAddress(27), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(27), source: MemoryAddress(17) }, Const { destination: MemoryAddress(27), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(27) }, BinaryIntOp { destination: MemoryAddress(27), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(27), source: MemoryAddress(12) }, Const { destination: MemoryAddress(27), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(27) }, Const { destination: MemoryAddress(27), bit_size: 8, value: 67 }, BinaryIntOp { destination: MemoryAddress(28), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(28), source: MemoryAddress(27) }, Const { destination: MemoryAddress(28), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(28) }, BinaryIntOp { destination: MemoryAddress(28), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(28), source: MemoryAddress(21) }, Const { destination: MemoryAddress(28), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(28) }, BinaryIntOp { destination: MemoryAddress(28), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(28), source: MemoryAddress(20) }, Const { destination: MemoryAddress(28), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(28) }, Const { destination: MemoryAddress(28), bit_size: 8, value: 118 }, BinaryIntOp { destination: MemoryAddress(29), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(29), source: MemoryAddress(28) }, Const { destination: MemoryAddress(29), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(29) }, BinaryIntOp { destination: MemoryAddress(29), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(29), source: MemoryAddress(26) }, Const { destination: MemoryAddress(29), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(29) }, BinaryIntOp { destination: MemoryAddress(29), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(29), source: MemoryAddress(12) }, Const { destination: MemoryAddress(29), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(29) }, BinaryIntOp { destination: MemoryAddress(29), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(29), source: MemoryAddress(23) }, Const { destination: MemoryAddress(29), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(29) }, BinaryIntOp { destination: MemoryAddress(29), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(29), source: MemoryAddress(12) }, Const { destination: MemoryAddress(29), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(29) }, Const { destination: MemoryAddress(29), bit_size: 8, value: 102 }, BinaryIntOp { destination: MemoryAddress(30), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(30), source: MemoryAddress(29) }, Const { destination: MemoryAddress(30), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(30) }, BinaryIntOp { destination: MemoryAddress(30), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(30), source: MemoryAddress(14) }, Const { destination: MemoryAddress(30), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(30) }, BinaryIntOp { destination: MemoryAddress(30), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(30), source: MemoryAddress(26) }, Const { destination: MemoryAddress(30), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(30) }, Const { destination: MemoryAddress(30), bit_size: 8, value: 108 }, BinaryIntOp { destination: MemoryAddress(31), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(31), source: MemoryAddress(30) }, Const { destination: MemoryAddress(31), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(31) }, BinaryIntOp { destination: MemoryAddress(31), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(31), source: MemoryAddress(16) }, Const { destination: MemoryAddress(31), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(31) }, BinaryIntOp { destination: MemoryAddress(31), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(31), source: MemoryAddress(18) }, Const { destination: MemoryAddress(31), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(31) }, BinaryIntOp { destination: MemoryAddress(31), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(31), source: MemoryAddress(12) }, Const { destination: MemoryAddress(31), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(31) }, BinaryIntOp { destination: MemoryAddress(31), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(31), source: MemoryAddress(17) }, Const { destination: MemoryAddress(31), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(31) }, Const { destination: MemoryAddress(31), bit_size: 8, value: 91 }, BinaryIntOp { destination: MemoryAddress(32), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(32), source: MemoryAddress(31) }, Const { destination: MemoryAddress(32), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(32) }, BinaryIntOp { destination: MemoryAddress(32), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(32), source: MemoryAddress(31) }, Const { destination: MemoryAddress(32), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(32) }, BinaryIntOp { destination: MemoryAddress(32), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(32), source: MemoryAddress(12) }, Const { destination: MemoryAddress(32), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(32) }, Const { destination: MemoryAddress(32), bit_size: 8, value: 120 }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(32) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(12) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(23) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(11) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(12) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(13) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(14) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(15) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(16) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(12) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(17) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(12) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(29) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(14) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(26) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(30) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(16) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(12) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, Const { destination: MemoryAddress(33), bit_size: 8, value: 125 }, BinaryIntOp { destination: MemoryAddress(34), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(34), source: MemoryAddress(33) }, Const { destination: MemoryAddress(34), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(34) }, Const { destination: MemoryAddress(34), bit_size: 8, value: 93 }, BinaryIntOp { destination: MemoryAddress(35), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(35), source: MemoryAddress(34) }, Const { destination: MemoryAddress(35), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(35) }, BinaryIntOp { destination: MemoryAddress(35), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(35), source: MemoryAddress(23) }, Const { destination: MemoryAddress(35), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(35) }, BinaryIntOp { destination: MemoryAddress(35), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(35), source: MemoryAddress(31) }, Const { destination: MemoryAddress(35), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(35) }, BinaryIntOp { destination: MemoryAddress(35), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(35), source: MemoryAddress(12) }, Const { destination: MemoryAddress(35), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(35) }, Const { destination: MemoryAddress(35), bit_size: 8, value: 121 }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(35) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(12) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(23) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(11) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(12) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(13) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(14) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(15) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(16) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(12) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(17) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(12) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(29) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(14) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(26) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(30) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(16) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(12) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(33) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(34) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(34) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(33) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, ForeignCall { function: "print", destinations: [], destination_value_types: [], inputs: [MemoryAddress(MemoryAddress(7)), HeapArray(HeapArray { pointer: MemoryAddress(2), size: 3 }), MemoryAddress(MemoryAddress(4)), MemoryAddress(MemoryAddress(5)), MemoryAddress(MemoryAddress(6)), HeapArray(HeapArray { pointer: MemoryAddress(8), size: 89 }), MemoryAddress(MemoryAddress(7))], input_value_types: [Simple(1), Array { value_types: [Simple(8)], size: 3 }, Simple(254), Simple(254), Simple(254), Array { value_types: [Simple(8)], size: 89 }, Simple(1)] }, Return]

+---------+----------+----------------------+--------------+----------------------+
| Package | Function | Expression Width     | ACIR Opcodes | Backend Circuit Size |
+---------+----------+----------------------+--------------+----------------------+
| edwards | main     | Bounded { width: 4 } | 1214         | 1029                 |
+---------+----------+----------------------+--------------+----------------------+
