Compiled ACIR for main (unoptimized):
func 0
current witness index : 607
private parameters indices : [0]
public parameters indices : [1]
return value indices : []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(2)), Simple(Witness(3)), Simple(Witness(4))]
EXPR [ (1, _0, _0) (-1, _5) 0 ]
EXPR [ (1, _0, _1) (-1, _6) 0 ]
EXPR [ (1, _1, _1) (-1, _7) 0 ]
EXPR [ (555, _2, _4) (1, _2) (-2, _6) 0 ]
EXPR [ (555, _3, _4) (1, _3) (1, _5) (-1, _7) 0 ]
EXPR [ (1, _5, _7) (-1, _4) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(8)), Simple(Witness(9)), Simple(Witness(10))]
EXPR [ (1, _2, _2) (-1, _11) 0 ]
EXPR [ (1, _2, _3) (-1, _12) 0 ]
EXPR [ (1, _3, _3) (-1, _13) 0 ]
EXPR [ (555, _8, _10) (1, _8) (-2, _12) 0 ]
EXPR [ (555, _9, _10) (1, _9) (1, _11) (-1, _13) 0 ]
EXPR [ (1, _11, _13) (-1, _10) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 })], outputs: [Simple(Witness(14)), Simple(Witness(15)), Simple(Witness(16))]
EXPR [ (1, _8, _8) (-1, _17) 0 ]
EXPR [ (1, _8, _9) (-1, _18) 0 ]
EXPR [ (1, _9, _9) (-1, _19) 0 ]
EXPR [ (555, _14, _16) (1, _14) (-2, _18) 0 ]
EXPR [ (555, _15, _16) (1, _15) (1, _17) (-1, _19) 0 ]
EXPR [ (1, _17, _19) (-1, _16) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 })], outputs: [Simple(Witness(20)), Simple(Witness(21)), Simple(Witness(22))]
EXPR [ (1, _14, _14) (-1, _23) 0 ]
EXPR [ (1, _14, _15) (-1, _24) 0 ]
EXPR [ (1, _15, _15) (-1, _25) 0 ]
EXPR [ (555, _20, _22) (1, _20) (-2, _24) 0 ]
EXPR [ (555, _21, _22) (1, _21) (1, _23) (-1, _25) 0 ]
EXPR [ (1, _23, _25) (-1, _22) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 0 })], outputs: [Simple(Witness(26)), Simple(Witness(27)), Simple(Witness(28))]
EXPR [ (1, _20, _20) (-1, _29) 0 ]
EXPR [ (1, _20, _21) (-1, _30) 0 ]
EXPR [ (1, _21, _21) (-1, _31) 0 ]
EXPR [ (555, _26, _28) (1, _26) (-2, _30) 0 ]
EXPR [ (555, _27, _28) (1, _27) (1, _29) (-1, _31) 0 ]
EXPR [ (1, _29, _31) (-1, _28) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: 0 })], outputs: [Simple(Witness(32)), Simple(Witness(33)), Simple(Witness(34))]
EXPR [ (1, _26, _26) (-1, _35) 0 ]
EXPR [ (1, _26, _27) (-1, _36) 0 ]
EXPR [ (1, _27, _27) (-1, _37) 0 ]
EXPR [ (555, _32, _34) (1, _32) (-2, _36) 0 ]
EXPR [ (555, _33, _34) (1, _33) (1, _35) (-1, _37) 0 ]
EXPR [ (1, _35, _37) (-1, _34) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: 0 })], outputs: [Simple(Witness(38)), Simple(Witness(39)), Simple(Witness(40))]
EXPR [ (1, _32, _32) (-1, _41) 0 ]
EXPR [ (1, _32, _33) (-1, _42) 0 ]
EXPR [ (1, _33, _33) (-1, _43) 0 ]
EXPR [ (555, _38, _40) (1, _38) (-2, _42) 0 ]
EXPR [ (555, _39, _40) (1, _39) (1, _41) (-1, _43) 0 ]
EXPR [ (1, _41, _43) (-1, _40) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(38))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(39))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(38))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(38))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(39))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(39))], q_c: 0 })], outputs: [Simple(Witness(44)), Simple(Witness(45)), Simple(Witness(46))]
EXPR [ (1, _38, _38) (-1, _47) 0 ]
EXPR [ (1, _38, _39) (-1, _48) 0 ]
EXPR [ (1, _39, _39) (-1, _49) 0 ]
EXPR [ (555, _44, _46) (1, _44) (-2, _48) 0 ]
EXPR [ (555, _45, _46) (1, _45) (1, _47) (-1, _49) 0 ]
EXPR [ (1, _47, _49) (-1, _46) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(44))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(44))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(44))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: 0 })], outputs: [Simple(Witness(50)), Simple(Witness(51)), Simple(Witness(52))]
EXPR [ (1, _44, _44) (-1, _53) 0 ]
EXPR [ (1, _44, _45) (-1, _54) 0 ]
EXPR [ (1, _45, _45) (-1, _55) 0 ]
EXPR [ (555, _50, _52) (1, _50) (-2, _54) 0 ]
EXPR [ (555, _51, _52) (1, _51) (1, _53) (-1, _55) 0 ]
EXPR [ (1, _53, _55) (-1, _52) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(50))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(51))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(50))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(50))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(51))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(51))], q_c: 0 })], outputs: [Simple(Witness(56)), Simple(Witness(57)), Simple(Witness(58))]
EXPR [ (1, _50, _50) (-1, _59) 0 ]
EXPR [ (1, _50, _51) (-1, _60) 0 ]
EXPR [ (1, _51, _51) (-1, _61) 0 ]
EXPR [ (555, _56, _58) (1, _56) (-2, _60) 0 ]
EXPR [ (555, _57, _58) (1, _57) (1, _59) (-1, _61) 0 ]
EXPR [ (1, _59, _61) (-1, _58) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(56))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(57))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(56))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(56))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(57))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(57))], q_c: 0 })], outputs: [Simple(Witness(62)), Simple(Witness(63)), Simple(Witness(64))]
EXPR [ (1, _56, _56) (-1, _65) 0 ]
EXPR [ (1, _56, _57) (-1, _66) 0 ]
EXPR [ (1, _57, _57) (-1, _67) 0 ]
EXPR [ (555, _62, _64) (1, _62) (-2, _66) 0 ]
EXPR [ (555, _63, _64) (1, _63) (1, _65) (-1, _67) 0 ]
EXPR [ (1, _65, _67) (-1, _64) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(62))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(63))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(62))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(62))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(63))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(63))], q_c: 0 })], outputs: [Simple(Witness(68)), Simple(Witness(69)), Simple(Witness(70))]
EXPR [ (1, _62, _62) (-1, _71) 0 ]
EXPR [ (1, _62, _63) (-1, _72) 0 ]
EXPR [ (1, _63, _63) (-1, _73) 0 ]
EXPR [ (555, _68, _70) (1, _68) (-2, _72) 0 ]
EXPR [ (555, _69, _70) (1, _69) (1, _71) (-1, _73) 0 ]
EXPR [ (1, _71, _73) (-1, _70) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(68))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(69))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(68))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(68))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(69))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(69))], q_c: 0 })], outputs: [Simple(Witness(74)), Simple(Witness(75)), Simple(Witness(76))]
EXPR [ (1, _68, _68) (-1, _77) 0 ]
EXPR [ (1, _68, _69) (-1, _78) 0 ]
EXPR [ (1, _69, _69) (-1, _79) 0 ]
EXPR [ (555, _74, _76) (1, _74) (-2, _78) 0 ]
EXPR [ (555, _75, _76) (1, _75) (1, _77) (-1, _79) 0 ]
EXPR [ (1, _77, _79) (-1, _76) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(74))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(75))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(74))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(74))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(75))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(75))], q_c: 0 })], outputs: [Simple(Witness(80)), Simple(Witness(81)), Simple(Witness(82))]
EXPR [ (1, _74, _74) (-1, _83) 0 ]
EXPR [ (1, _74, _75) (-1, _84) 0 ]
EXPR [ (1, _75, _75) (-1, _85) 0 ]
EXPR [ (555, _80, _82) (1, _80) (-2, _84) 0 ]
EXPR [ (555, _81, _82) (1, _81) (1, _83) (-1, _85) 0 ]
EXPR [ (1, _83, _85) (-1, _82) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(80))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(81))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(80))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(80))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(81))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(81))], q_c: 0 })], outputs: [Simple(Witness(86)), Simple(Witness(87)), Simple(Witness(88))]
EXPR [ (1, _80, _80) (-1, _89) 0 ]
EXPR [ (1, _80, _81) (-1, _90) 0 ]
EXPR [ (1, _81, _81) (-1, _91) 0 ]
EXPR [ (555, _86, _88) (1, _86) (-2, _90) 0 ]
EXPR [ (555, _87, _88) (1, _87) (1, _89) (-1, _91) 0 ]
EXPR [ (1, _89, _91) (-1, _88) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(86))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(87))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(86))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(86))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(87))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(87))], q_c: 0 })], outputs: [Simple(Witness(92)), Simple(Witness(93)), Simple(Witness(94))]
EXPR [ (1, _86, _86) (-1, _95) 0 ]
EXPR [ (1, _86, _87) (-1, _96) 0 ]
EXPR [ (1, _87, _87) (-1, _97) 0 ]
EXPR [ (555, _92, _94) (1, _92) (-2, _96) 0 ]
EXPR [ (555, _93, _94) (1, _93) (1, _95) (-1, _97) 0 ]
EXPR [ (1, _95, _97) (-1, _94) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(92))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(93))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(92))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(92))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(93))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(93))], q_c: 0 })], outputs: [Simple(Witness(98)), Simple(Witness(99)), Simple(Witness(100))]
EXPR [ (1, _92, _92) (-1, _101) 0 ]
EXPR [ (1, _92, _93) (-1, _102) 0 ]
EXPR [ (1, _93, _93) (-1, _103) 0 ]
EXPR [ (555, _98, _100) (1, _98) (-2, _102) 0 ]
EXPR [ (555, _99, _100) (1, _99) (1, _101) (-1, _103) 0 ]
EXPR [ (1, _101, _103) (-1, _100) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(98))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(99))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(98))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(98))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(99))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(99))], q_c: 0 })], outputs: [Simple(Witness(104)), Simple(Witness(105)), Simple(Witness(106))]
EXPR [ (1, _98, _98) (-1, _107) 0 ]
EXPR [ (1, _98, _99) (-1, _108) 0 ]
EXPR [ (1, _99, _99) (-1, _109) 0 ]
EXPR [ (555, _104, _106) (1, _104) (-2, _108) 0 ]
EXPR [ (555, _105, _106) (1, _105) (1, _107) (-1, _109) 0 ]
EXPR [ (1, _107, _109) (-1, _106) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(104))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(105))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(104))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(104))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(105))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(105))], q_c: 0 })], outputs: [Simple(Witness(110)), Simple(Witness(111)), Simple(Witness(112))]
EXPR [ (1, _104, _104) (-1, _113) 0 ]
EXPR [ (1, _104, _105) (-1, _114) 0 ]
EXPR [ (1, _105, _105) (-1, _115) 0 ]
EXPR [ (555, _110, _112) (1, _110) (-2, _114) 0 ]
EXPR [ (555, _111, _112) (1, _111) (1, _113) (-1, _115) 0 ]
EXPR [ (1, _113, _115) (-1, _112) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(110))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(111))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(110))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(110))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(111))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(111))], q_c: 0 })], outputs: [Simple(Witness(116)), Simple(Witness(117)), Simple(Witness(118))]
EXPR [ (1, _110, _110) (-1, _119) 0 ]
EXPR [ (1, _110, _111) (-1, _120) 0 ]
EXPR [ (1, _111, _111) (-1, _121) 0 ]
EXPR [ (555, _116, _118) (1, _116) (-2, _120) 0 ]
EXPR [ (555, _117, _118) (1, _117) (1, _119) (-1, _121) 0 ]
EXPR [ (1, _119, _121) (-1, _118) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(116))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(117))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(116))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(116))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(117))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(117))], q_c: 0 })], outputs: [Simple(Witness(122)), Simple(Witness(123)), Simple(Witness(124))]
EXPR [ (1, _116, _116) (-1, _125) 0 ]
EXPR [ (1, _116, _117) (-1, _126) 0 ]
EXPR [ (1, _117, _117) (-1, _127) 0 ]
EXPR [ (555, _122, _124) (1, _122) (-2, _126) 0 ]
EXPR [ (555, _123, _124) (1, _123) (1, _125) (-1, _127) 0 ]
EXPR [ (1, _125, _127) (-1, _124) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(122))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(123))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(122))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(122))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(123))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(123))], q_c: 0 })], outputs: [Simple(Witness(128)), Simple(Witness(129)), Simple(Witness(130))]
EXPR [ (1, _122, _122) (-1, _131) 0 ]
EXPR [ (1, _122, _123) (-1, _132) 0 ]
EXPR [ (1, _123, _123) (-1, _133) 0 ]
EXPR [ (555, _128, _130) (1, _128) (-2, _132) 0 ]
EXPR [ (555, _129, _130) (1, _129) (1, _131) (-1, _133) 0 ]
EXPR [ (1, _131, _133) (-1, _130) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(128))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(129))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(128))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(128))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(129))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(129))], q_c: 0 })], outputs: [Simple(Witness(134)), Simple(Witness(135)), Simple(Witness(136))]
EXPR [ (1, _128, _128) (-1, _137) 0 ]
EXPR [ (1, _128, _129) (-1, _138) 0 ]
EXPR [ (1, _129, _129) (-1, _139) 0 ]
EXPR [ (555, _134, _136) (1, _134) (-2, _138) 0 ]
EXPR [ (555, _135, _136) (1, _135) (1, _137) (-1, _139) 0 ]
EXPR [ (1, _137, _139) (-1, _136) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(134))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(135))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(134))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(134))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(135))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(135))], q_c: 0 })], outputs: [Simple(Witness(140)), Simple(Witness(141)), Simple(Witness(142))]
EXPR [ (1, _134, _134) (-1, _143) 0 ]
EXPR [ (1, _134, _135) (-1, _144) 0 ]
EXPR [ (1, _135, _135) (-1, _145) 0 ]
EXPR [ (555, _140, _142) (1, _140) (-2, _144) 0 ]
EXPR [ (555, _141, _142) (1, _141) (1, _143) (-1, _145) 0 ]
EXPR [ (1, _143, _145) (-1, _142) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(140))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(140))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(140))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: 0 })], outputs: [Simple(Witness(146)), Simple(Witness(147)), Simple(Witness(148))]
EXPR [ (1, _140, _140) (-1, _149) 0 ]
EXPR [ (1, _140, _141) (-1, _150) 0 ]
EXPR [ (1, _141, _141) (-1, _151) 0 ]
EXPR [ (555, _146, _148) (1, _146) (-2, _150) 0 ]
EXPR [ (555, _147, _148) (1, _147) (1, _149) (-1, _151) 0 ]
EXPR [ (1, _149, _151) (-1, _148) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(146))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(147))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(146))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(146))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(147))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(147))], q_c: 0 })], outputs: [Simple(Witness(152)), Simple(Witness(153)), Simple(Witness(154))]
EXPR [ (1, _146, _146) (-1, _155) 0 ]
EXPR [ (1, _146, _147) (-1, _156) 0 ]
EXPR [ (1, _147, _147) (-1, _157) 0 ]
EXPR [ (555, _152, _154) (1, _152) (-2, _156) 0 ]
EXPR [ (555, _153, _154) (1, _153) (1, _155) (-1, _157) 0 ]
EXPR [ (1, _155, _157) (-1, _154) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(152))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(153))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(152))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(152))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(153))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(153))], q_c: 0 })], outputs: [Simple(Witness(158)), Simple(Witness(159)), Simple(Witness(160))]
EXPR [ (1, _152, _152) (-1, _161) 0 ]
EXPR [ (1, _152, _153) (-1, _162) 0 ]
EXPR [ (1, _153, _153) (-1, _163) 0 ]
EXPR [ (555, _158, _160) (1, _158) (-2, _162) 0 ]
EXPR [ (555, _159, _160) (1, _159) (1, _161) (-1, _163) 0 ]
EXPR [ (1, _161, _163) (-1, _160) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(158))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(159))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(158))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(158))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(159))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(159))], q_c: 0 })], outputs: [Simple(Witness(164)), Simple(Witness(165)), Simple(Witness(166))]
EXPR [ (1, _158, _158) (-1, _167) 0 ]
EXPR [ (1, _158, _159) (-1, _168) 0 ]
EXPR [ (1, _159, _159) (-1, _169) 0 ]
EXPR [ (555, _164, _166) (1, _164) (-2, _168) 0 ]
EXPR [ (555, _165, _166) (1, _165) (1, _167) (-1, _169) 0 ]
EXPR [ (1, _167, _169) (-1, _166) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(164))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(165))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(164))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(164))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(165))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(165))], q_c: 0 })], outputs: [Simple(Witness(170)), Simple(Witness(171)), Simple(Witness(172))]
EXPR [ (1, _164, _164) (-1, _173) 0 ]
EXPR [ (1, _164, _165) (-1, _174) 0 ]
EXPR [ (1, _165, _165) (-1, _175) 0 ]
EXPR [ (555, _170, _172) (1, _170) (-2, _174) 0 ]
EXPR [ (555, _171, _172) (1, _171) (1, _173) (-1, _175) 0 ]
EXPR [ (1, _173, _175) (-1, _172) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(170))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(171))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(170))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(170))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(171))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(171))], q_c: 0 })], outputs: [Simple(Witness(176)), Simple(Witness(177)), Simple(Witness(178))]
EXPR [ (1, _170, _170) (-1, _179) 0 ]
EXPR [ (1, _170, _171) (-1, _180) 0 ]
EXPR [ (1, _171, _171) (-1, _181) 0 ]
EXPR [ (555, _176, _178) (1, _176) (-2, _180) 0 ]
EXPR [ (555, _177, _178) (1, _177) (1, _179) (-1, _181) 0 ]
EXPR [ (1, _179, _181) (-1, _178) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(177))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(177))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(177))], q_c: 0 })], outputs: [Simple(Witness(182)), Simple(Witness(183)), Simple(Witness(184))]
EXPR [ (1, _176, _176) (-1, _185) 0 ]
EXPR [ (1, _176, _177) (-1, _186) 0 ]
EXPR [ (1, _177, _177) (-1, _187) 0 ]
EXPR [ (555, _182, _184) (1, _182) (-2, _186) 0 ]
EXPR [ (555, _183, _184) (1, _183) (1, _185) (-1, _187) 0 ]
EXPR [ (1, _185, _187) (-1, _184) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(182))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(183))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(182))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(182))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(183))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(183))], q_c: 0 })], outputs: [Simple(Witness(188)), Simple(Witness(189)), Simple(Witness(190))]
EXPR [ (1, _182, _182) (-1, _191) 0 ]
EXPR [ (1, _182, _183) (-1, _192) 0 ]
EXPR [ (1, _183, _183) (-1, _193) 0 ]
EXPR [ (555, _188, _190) (1, _188) (-2, _192) 0 ]
EXPR [ (555, _189, _190) (1, _189) (1, _191) (-1, _193) 0 ]
EXPR [ (1, _191, _193) (-1, _190) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(188))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(189))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(188))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(188))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(189))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(189))], q_c: 0 })], outputs: [Simple(Witness(194)), Simple(Witness(195)), Simple(Witness(196))]
EXPR [ (1, _188, _188) (-1, _197) 0 ]
EXPR [ (1, _188, _189) (-1, _198) 0 ]
EXPR [ (1, _189, _189) (-1, _199) 0 ]
EXPR [ (555, _194, _196) (1, _194) (-2, _198) 0 ]
EXPR [ (555, _195, _196) (1, _195) (1, _197) (-1, _199) 0 ]
EXPR [ (1, _197, _199) (-1, _196) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(194))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(195))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(194))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(194))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(195))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(195))], q_c: 0 })], outputs: [Simple(Witness(200)), Simple(Witness(201)), Simple(Witness(202))]
EXPR [ (1, _194, _194) (-1, _203) 0 ]
EXPR [ (1, _194, _195) (-1, _204) 0 ]
EXPR [ (1, _195, _195) (-1, _205) 0 ]
EXPR [ (555, _200, _202) (1, _200) (-2, _204) 0 ]
EXPR [ (555, _201, _202) (1, _201) (1, _203) (-1, _205) 0 ]
EXPR [ (1, _203, _205) (-1, _202) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(200))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(201))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(200))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(200))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(201))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(201))], q_c: 0 })], outputs: [Simple(Witness(206)), Simple(Witness(207)), Simple(Witness(208))]
EXPR [ (1, _200, _200) (-1, _209) 0 ]
EXPR [ (1, _200, _201) (-1, _210) 0 ]
EXPR [ (1, _201, _201) (-1, _211) 0 ]
EXPR [ (555, _206, _208) (1, _206) (-2, _210) 0 ]
EXPR [ (555, _207, _208) (1, _207) (1, _209) (-1, _211) 0 ]
EXPR [ (1, _209, _211) (-1, _208) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(206))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(206))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(206))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: 0 })], outputs: [Simple(Witness(212)), Simple(Witness(213)), Simple(Witness(214))]
EXPR [ (1, _206, _206) (-1, _215) 0 ]
EXPR [ (1, _206, _207) (-1, _216) 0 ]
EXPR [ (1, _207, _207) (-1, _217) 0 ]
EXPR [ (555, _212, _214) (1, _212) (-2, _216) 0 ]
EXPR [ (555, _213, _214) (1, _213) (1, _215) (-1, _217) 0 ]
EXPR [ (1, _215, _217) (-1, _214) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(212))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(213))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(212))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(212))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(213))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(213))], q_c: 0 })], outputs: [Simple(Witness(218)), Simple(Witness(219)), Simple(Witness(220))]
EXPR [ (1, _212, _212) (-1, _221) 0 ]
EXPR [ (1, _212, _213) (-1, _222) 0 ]
EXPR [ (1, _213, _213) (-1, _223) 0 ]
EXPR [ (555, _218, _220) (1, _218) (-2, _222) 0 ]
EXPR [ (555, _219, _220) (1, _219) (1, _221) (-1, _223) 0 ]
EXPR [ (1, _221, _223) (-1, _220) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(218))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(219))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(218))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(218))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(219))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(219))], q_c: 0 })], outputs: [Simple(Witness(224)), Simple(Witness(225)), Simple(Witness(226))]
EXPR [ (1, _218, _218) (-1, _227) 0 ]
EXPR [ (1, _218, _219) (-1, _228) 0 ]
EXPR [ (1, _219, _219) (-1, _229) 0 ]
EXPR [ (555, _224, _226) (1, _224) (-2, _228) 0 ]
EXPR [ (555, _225, _226) (1, _225) (1, _227) (-1, _229) 0 ]
EXPR [ (1, _227, _229) (-1, _226) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(224))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(225))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(224))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(224))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(225))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(225))], q_c: 0 })], outputs: [Simple(Witness(230)), Simple(Witness(231)), Simple(Witness(232))]
EXPR [ (1, _224, _224) (-1, _233) 0 ]
EXPR [ (1, _224, _225) (-1, _234) 0 ]
EXPR [ (1, _225, _225) (-1, _235) 0 ]
EXPR [ (555, _230, _232) (1, _230) (-2, _234) 0 ]
EXPR [ (555, _231, _232) (1, _231) (1, _233) (-1, _235) 0 ]
EXPR [ (1, _233, _235) (-1, _232) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(230))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(231))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(230))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(230))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(231))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(231))], q_c: 0 })], outputs: [Simple(Witness(236)), Simple(Witness(237)), Simple(Witness(238))]
EXPR [ (1, _230, _230) (-1, _239) 0 ]
EXPR [ (1, _230, _231) (-1, _240) 0 ]
EXPR [ (1, _231, _231) (-1, _241) 0 ]
EXPR [ (555, _236, _238) (1, _236) (-2, _240) 0 ]
EXPR [ (555, _237, _238) (1, _237) (1, _239) (-1, _241) 0 ]
EXPR [ (1, _239, _241) (-1, _238) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(236))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(237))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(236))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(236))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(237))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(237))], q_c: 0 })], outputs: [Simple(Witness(242)), Simple(Witness(243)), Simple(Witness(244))]
EXPR [ (1, _236, _236) (-1, _245) 0 ]
EXPR [ (1, _236, _237) (-1, _246) 0 ]
EXPR [ (1, _237, _237) (-1, _247) 0 ]
EXPR [ (555, _242, _244) (1, _242) (-2, _246) 0 ]
EXPR [ (555, _243, _244) (1, _243) (1, _245) (-1, _247) 0 ]
EXPR [ (1, _245, _247) (-1, _244) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(242))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(243))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(242))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(242))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(243))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(243))], q_c: 0 })], outputs: [Simple(Witness(248)), Simple(Witness(249)), Simple(Witness(250))]
EXPR [ (1, _242, _242) (-1, _251) 0 ]
EXPR [ (1, _242, _243) (-1, _252) 0 ]
EXPR [ (1, _243, _243) (-1, _253) 0 ]
EXPR [ (555, _248, _250) (1, _248) (-2, _252) 0 ]
EXPR [ (555, _249, _250) (1, _249) (1, _251) (-1, _253) 0 ]
EXPR [ (1, _251, _253) (-1, _250) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(248))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(249))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(248))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(248))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(249))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(249))], q_c: 0 })], outputs: [Simple(Witness(254)), Simple(Witness(255)), Simple(Witness(256))]
EXPR [ (1, _248, _248) (-1, _257) 0 ]
EXPR [ (1, _248, _249) (-1, _258) 0 ]
EXPR [ (1, _249, _249) (-1, _259) 0 ]
EXPR [ (555, _254, _256) (1, _254) (-2, _258) 0 ]
EXPR [ (555, _255, _256) (1, _255) (1, _257) (-1, _259) 0 ]
EXPR [ (1, _257, _259) (-1, _256) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(255))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(255))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(255))], q_c: 0 })], outputs: [Simple(Witness(260)), Simple(Witness(261)), Simple(Witness(262))]
EXPR [ (1, _254, _254) (-1, _263) 0 ]
EXPR [ (1, _254, _255) (-1, _264) 0 ]
EXPR [ (1, _255, _255) (-1, _265) 0 ]
EXPR [ (555, _260, _262) (1, _260) (-2, _264) 0 ]
EXPR [ (555, _261, _262) (1, _261) (1, _263) (-1, _265) 0 ]
EXPR [ (1, _263, _265) (-1, _262) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(260))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(261))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(260))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(260))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(261))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(261))], q_c: 0 })], outputs: [Simple(Witness(266)), Simple(Witness(267)), Simple(Witness(268))]
EXPR [ (1, _260, _260) (-1, _269) 0 ]
EXPR [ (1, _260, _261) (-1, _270) 0 ]
EXPR [ (1, _261, _261) (-1, _271) 0 ]
EXPR [ (555, _266, _268) (1, _266) (-2, _270) 0 ]
EXPR [ (555, _267, _268) (1, _267) (1, _269) (-1, _271) 0 ]
EXPR [ (1, _269, _271) (-1, _268) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(266))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(267))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(266))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(266))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(267))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(267))], q_c: 0 })], outputs: [Simple(Witness(272)), Simple(Witness(273)), Simple(Witness(274))]
EXPR [ (1, _266, _266) (-1, _275) 0 ]
EXPR [ (1, _266, _267) (-1, _276) 0 ]
EXPR [ (1, _267, _267) (-1, _277) 0 ]
EXPR [ (555, _272, _274) (1, _272) (-2, _276) 0 ]
EXPR [ (555, _273, _274) (1, _273) (1, _275) (-1, _277) 0 ]
EXPR [ (1, _275, _277) (-1, _274) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(272))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(273))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(272))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(272))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(273))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(273))], q_c: 0 })], outputs: [Simple(Witness(278)), Simple(Witness(279)), Simple(Witness(280))]
EXPR [ (1, _272, _272) (-1, _281) 0 ]
EXPR [ (1, _272, _273) (-1, _282) 0 ]
EXPR [ (1, _273, _273) (-1, _283) 0 ]
EXPR [ (555, _278, _280) (1, _278) (-2, _282) 0 ]
EXPR [ (555, _279, _280) (1, _279) (1, _281) (-1, _283) 0 ]
EXPR [ (1, _281, _283) (-1, _280) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(278))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(279))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(278))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(278))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(279))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(279))], q_c: 0 })], outputs: [Simple(Witness(284)), Simple(Witness(285)), Simple(Witness(286))]
EXPR [ (1, _278, _278) (-1, _287) 0 ]
EXPR [ (1, _278, _279) (-1, _288) 0 ]
EXPR [ (1, _279, _279) (-1, _289) 0 ]
EXPR [ (555, _284, _286) (1, _284) (-2, _288) 0 ]
EXPR [ (555, _285, _286) (1, _285) (1, _287) (-1, _289) 0 ]
EXPR [ (1, _287, _289) (-1, _286) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(284))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(284))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(284))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: 0 })], outputs: [Simple(Witness(290)), Simple(Witness(291)), Simple(Witness(292))]
EXPR [ (1, _284, _284) (-1, _293) 0 ]
EXPR [ (1, _284, _285) (-1, _294) 0 ]
EXPR [ (1, _285, _285) (-1, _295) 0 ]
EXPR [ (555, _290, _292) (1, _290) (-2, _294) 0 ]
EXPR [ (555, _291, _292) (1, _291) (1, _293) (-1, _295) 0 ]
EXPR [ (1, _293, _295) (-1, _292) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(290))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(291))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(290))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(290))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(291))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(291))], q_c: 0 })], outputs: [Simple(Witness(296)), Simple(Witness(297)), Simple(Witness(298))]
EXPR [ (1, _290, _290) (-1, _299) 0 ]
EXPR [ (1, _290, _291) (-1, _300) 0 ]
EXPR [ (1, _291, _291) (-1, _301) 0 ]
EXPR [ (555, _296, _298) (1, _296) (-2, _300) 0 ]
EXPR [ (555, _297, _298) (1, _297) (1, _299) (-1, _301) 0 ]
EXPR [ (1, _299, _301) (-1, _298) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(296))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(297))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(296))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(296))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(297))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(297))], q_c: 0 })], outputs: [Simple(Witness(302)), Simple(Witness(303)), Simple(Witness(304))]
EXPR [ (1, _296, _296) (-1, _305) 0 ]
EXPR [ (1, _296, _297) (-1, _306) 0 ]
EXPR [ (1, _297, _297) (-1, _307) 0 ]
EXPR [ (555, _302, _304) (1, _302) (-2, _306) 0 ]
EXPR [ (555, _303, _304) (1, _303) (1, _305) (-1, _307) 0 ]
EXPR [ (1, _305, _307) (-1, _304) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(302))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(303))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(302))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(302))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(303))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(303))], q_c: 0 })], outputs: [Simple(Witness(308)), Simple(Witness(309)), Simple(Witness(310))]
EXPR [ (1, _302, _302) (-1, _311) 0 ]
EXPR [ (1, _302, _303) (-1, _312) 0 ]
EXPR [ (1, _303, _303) (-1, _313) 0 ]
EXPR [ (555, _308, _310) (1, _308) (-2, _312) 0 ]
EXPR [ (555, _309, _310) (1, _309) (1, _311) (-1, _313) 0 ]
EXPR [ (1, _311, _313) (-1, _310) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(308))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(309))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(308))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(308))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(309))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(309))], q_c: 0 })], outputs: [Simple(Witness(314)), Simple(Witness(315)), Simple(Witness(316))]
EXPR [ (1, _308, _308) (-1, _317) 0 ]
EXPR [ (1, _308, _309) (-1, _318) 0 ]
EXPR [ (1, _309, _309) (-1, _319) 0 ]
EXPR [ (555, _314, _316) (1, _314) (-2, _318) 0 ]
EXPR [ (555, _315, _316) (1, _315) (1, _317) (-1, _319) 0 ]
EXPR [ (1, _317, _319) (-1, _316) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(314))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(315))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(314))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(314))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(315))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(315))], q_c: 0 })], outputs: [Simple(Witness(320)), Simple(Witness(321)), Simple(Witness(322))]
EXPR [ (1, _314, _314) (-1, _323) 0 ]
EXPR [ (1, _314, _315) (-1, _324) 0 ]
EXPR [ (1, _315, _315) (-1, _325) 0 ]
EXPR [ (555, _320, _322) (1, _320) (-2, _324) 0 ]
EXPR [ (555, _321, _322) (1, _321) (1, _323) (-1, _325) 0 ]
EXPR [ (1, _323, _325) (-1, _322) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(320))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(321))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(320))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(320))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(321))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(321))], q_c: 0 })], outputs: [Simple(Witness(326)), Simple(Witness(327)), Simple(Witness(328))]
EXPR [ (1, _320, _320) (-1, _329) 0 ]
EXPR [ (1, _320, _321) (-1, _330) 0 ]
EXPR [ (1, _321, _321) (-1, _331) 0 ]
EXPR [ (555, _326, _328) (1, _326) (-2, _330) 0 ]
EXPR [ (555, _327, _328) (1, _327) (1, _329) (-1, _331) 0 ]
EXPR [ (1, _329, _331) (-1, _328) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(327))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(327))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(327))], q_c: 0 })], outputs: [Simple(Witness(332)), Simple(Witness(333)), Simple(Witness(334))]
EXPR [ (1, _326, _326) (-1, _335) 0 ]
EXPR [ (1, _326, _327) (-1, _336) 0 ]
EXPR [ (1, _327, _327) (-1, _337) 0 ]
EXPR [ (555, _332, _334) (1, _332) (-2, _336) 0 ]
EXPR [ (555, _333, _334) (1, _333) (1, _335) (-1, _337) 0 ]
EXPR [ (1, _335, _337) (-1, _334) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(332))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(333))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(332))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(332))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(333))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(333))], q_c: 0 })], outputs: [Simple(Witness(338)), Simple(Witness(339)), Simple(Witness(340))]
EXPR [ (1, _332, _332) (-1, _341) 0 ]
EXPR [ (1, _332, _333) (-1, _342) 0 ]
EXPR [ (1, _333, _333) (-1, _343) 0 ]
EXPR [ (555, _338, _340) (1, _338) (-2, _342) 0 ]
EXPR [ (555, _339, _340) (1, _339) (1, _341) (-1, _343) 0 ]
EXPR [ (1, _341, _343) (-1, _340) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(338))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(339))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(338))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(338))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(339))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(339))], q_c: 0 })], outputs: [Simple(Witness(344)), Simple(Witness(345)), Simple(Witness(346))]
EXPR [ (1, _338, _338) (-1, _347) 0 ]
EXPR [ (1, _338, _339) (-1, _348) 0 ]
EXPR [ (1, _339, _339) (-1, _349) 0 ]
EXPR [ (555, _344, _346) (1, _344) (-2, _348) 0 ]
EXPR [ (555, _345, _346) (1, _345) (1, _347) (-1, _349) 0 ]
EXPR [ (1, _347, _349) (-1, _346) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(344))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(345))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(344))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(344))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(345))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(345))], q_c: 0 })], outputs: [Simple(Witness(350)), Simple(Witness(351)), Simple(Witness(352))]
EXPR [ (1, _344, _344) (-1, _353) 0 ]
EXPR [ (1, _344, _345) (-1, _354) 0 ]
EXPR [ (1, _345, _345) (-1, _355) 0 ]
EXPR [ (555, _350, _352) (1, _350) (-2, _354) 0 ]
EXPR [ (555, _351, _352) (1, _351) (1, _353) (-1, _355) 0 ]
EXPR [ (1, _353, _355) (-1, _352) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(350))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(351))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(350))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(350))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(351))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(351))], q_c: 0 })], outputs: [Simple(Witness(356)), Simple(Witness(357)), Simple(Witness(358))]
EXPR [ (1, _350, _350) (-1, _359) 0 ]
EXPR [ (1, _350, _351) (-1, _360) 0 ]
EXPR [ (1, _351, _351) (-1, _361) 0 ]
EXPR [ (555, _356, _358) (1, _356) (-2, _360) 0 ]
EXPR [ (555, _357, _358) (1, _357) (1, _359) (-1, _361) 0 ]
EXPR [ (1, _359, _361) (-1, _358) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(356))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(357))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(356))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(356))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(357))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(357))], q_c: 0 })], outputs: [Simple(Witness(362)), Simple(Witness(363)), Simple(Witness(364))]
EXPR [ (1, _356, _356) (-1, _365) 0 ]
EXPR [ (1, _356, _357) (-1, _366) 0 ]
EXPR [ (1, _357, _357) (-1, _367) 0 ]
EXPR [ (555, _362, _364) (1, _362) (-2, _366) 0 ]
EXPR [ (555, _363, _364) (1, _363) (1, _365) (-1, _367) 0 ]
EXPR [ (1, _365, _367) (-1, _364) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(362))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(363))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(362))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(362))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(363))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(363))], q_c: 0 })], outputs: [Simple(Witness(368)), Simple(Witness(369)), Simple(Witness(370))]
EXPR [ (1, _362, _362) (-1, _371) 0 ]
EXPR [ (1, _362, _363) (-1, _372) 0 ]
EXPR [ (1, _363, _363) (-1, _373) 0 ]
EXPR [ (555, _368, _370) (1, _368) (-2, _372) 0 ]
EXPR [ (555, _369, _370) (1, _369) (1, _371) (-1, _373) 0 ]
EXPR [ (1, _371, _373) (-1, _370) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(368))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(369))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(368))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(368))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(369))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(369))], q_c: 0 })], outputs: [Simple(Witness(374)), Simple(Witness(375)), Simple(Witness(376))]
EXPR [ (1, _368, _368) (-1, _377) 0 ]
EXPR [ (1, _368, _369) (-1, _378) 0 ]
EXPR [ (1, _369, _369) (-1, _379) 0 ]
EXPR [ (555, _374, _376) (1, _374) (-2, _378) 0 ]
EXPR [ (555, _375, _376) (1, _375) (1, _377) (-1, _379) 0 ]
EXPR [ (1, _377, _379) (-1, _376) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(374))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(375))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(374))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(374))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(375))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(375))], q_c: 0 })], outputs: [Simple(Witness(380)), Simple(Witness(381)), Simple(Witness(382))]
EXPR [ (1, _374, _374) (-1, _383) 0 ]
EXPR [ (1, _374, _375) (-1, _384) 0 ]
EXPR [ (1, _375, _375) (-1, _385) 0 ]
EXPR [ (555, _380, _382) (1, _380) (-2, _384) 0 ]
EXPR [ (555, _381, _382) (1, _381) (1, _383) (-1, _385) 0 ]
EXPR [ (1, _383, _385) (-1, _382) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(380))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(381))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(380))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(380))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(381))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(381))], q_c: 0 })], outputs: [Simple(Witness(386)), Simple(Witness(387)), Simple(Witness(388))]
EXPR [ (1, _380, _380) (-1, _389) 0 ]
EXPR [ (1, _380, _381) (-1, _390) 0 ]
EXPR [ (1, _381, _381) (-1, _391) 0 ]
EXPR [ (555, _386, _388) (1, _386) (-2, _390) 0 ]
EXPR [ (555, _387, _388) (1, _387) (1, _389) (-1, _391) 0 ]
EXPR [ (1, _389, _391) (-1, _388) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(386))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(387))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(386))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(386))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(387))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(387))], q_c: 0 })], outputs: [Simple(Witness(392)), Simple(Witness(393)), Simple(Witness(394))]
EXPR [ (1, _386, _386) (-1, _395) 0 ]
EXPR [ (1, _386, _387) (-1, _396) 0 ]
EXPR [ (1, _387, _387) (-1, _397) 0 ]
EXPR [ (555, _392, _394) (1, _392) (-2, _396) 0 ]
EXPR [ (555, _393, _394) (1, _393) (1, _395) (-1, _397) 0 ]
EXPR [ (1, _395, _397) (-1, _394) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(392))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(393))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(392))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(392))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(393))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(393))], q_c: 0 })], outputs: [Simple(Witness(398)), Simple(Witness(399)), Simple(Witness(400))]
EXPR [ (1, _392, _392) (-1, _401) 0 ]
EXPR [ (1, _392, _393) (-1, _402) 0 ]
EXPR [ (1, _393, _393) (-1, _403) 0 ]
EXPR [ (555, _398, _400) (1, _398) (-2, _402) 0 ]
EXPR [ (555, _399, _400) (1, _399) (1, _401) (-1, _403) 0 ]
EXPR [ (1, _401, _403) (-1, _400) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(398))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(399))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(398))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(398))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(399))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(399))], q_c: 0 })], outputs: [Simple(Witness(404)), Simple(Witness(405)), Simple(Witness(406))]
EXPR [ (1, _398, _398) (-1, _407) 0 ]
EXPR [ (1, _398, _399) (-1, _408) 0 ]
EXPR [ (1, _399, _399) (-1, _409) 0 ]
EXPR [ (555, _404, _406) (1, _404) (-2, _408) 0 ]
EXPR [ (555, _405, _406) (1, _405) (1, _407) (-1, _409) 0 ]
EXPR [ (1, _407, _409) (-1, _406) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(404))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(405))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(404))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(404))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(405))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(405))], q_c: 0 })], outputs: [Simple(Witness(410)), Simple(Witness(411)), Simple(Witness(412))]
EXPR [ (1, _404, _404) (-1, _413) 0 ]
EXPR [ (1, _404, _405) (-1, _414) 0 ]
EXPR [ (1, _405, _405) (-1, _415) 0 ]
EXPR [ (555, _410, _412) (1, _410) (-2, _414) 0 ]
EXPR [ (555, _411, _412) (1, _411) (1, _413) (-1, _415) 0 ]
EXPR [ (1, _413, _415) (-1, _412) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(410))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(411))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(410))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(410))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(411))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(411))], q_c: 0 })], outputs: [Simple(Witness(416)), Simple(Witness(417)), Simple(Witness(418))]
EXPR [ (1, _410, _410) (-1, _419) 0 ]
EXPR [ (1, _410, _411) (-1, _420) 0 ]
EXPR [ (1, _411, _411) (-1, _421) 0 ]
EXPR [ (555, _416, _418) (1, _416) (-2, _420) 0 ]
EXPR [ (555, _417, _418) (1, _417) (1, _419) (-1, _421) 0 ]
EXPR [ (1, _419, _421) (-1, _418) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(416))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(417))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(416))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(416))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(417))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(417))], q_c: 0 })], outputs: [Simple(Witness(422)), Simple(Witness(423)), Simple(Witness(424))]
EXPR [ (1, _416, _416) (-1, _425) 0 ]
EXPR [ (1, _416, _417) (-1, _426) 0 ]
EXPR [ (1, _417, _417) (-1, _427) 0 ]
EXPR [ (555, _422, _424) (1, _422) (-2, _426) 0 ]
EXPR [ (555, _423, _424) (1, _423) (1, _425) (-1, _427) 0 ]
EXPR [ (1, _425, _427) (-1, _424) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(422))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(423))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(422))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(422))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(423))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(423))], q_c: 0 })], outputs: [Simple(Witness(428)), Simple(Witness(429)), Simple(Witness(430))]
EXPR [ (1, _422, _422) (-1, _431) 0 ]
EXPR [ (1, _422, _423) (-1, _432) 0 ]
EXPR [ (1, _423, _423) (-1, _433) 0 ]
EXPR [ (555, _428, _430) (1, _428) (-2, _432) 0 ]
EXPR [ (555, _429, _430) (1, _429) (1, _431) (-1, _433) 0 ]
EXPR [ (1, _431, _433) (-1, _430) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(428))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(429))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(428))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(428))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(429))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(429))], q_c: 0 })], outputs: [Simple(Witness(434)), Simple(Witness(435)), Simple(Witness(436))]
EXPR [ (1, _428, _428) (-1, _437) 0 ]
EXPR [ (1, _428, _429) (-1, _438) 0 ]
EXPR [ (1, _429, _429) (-1, _439) 0 ]
EXPR [ (555, _434, _436) (1, _434) (-2, _438) 0 ]
EXPR [ (555, _435, _436) (1, _435) (1, _437) (-1, _439) 0 ]
EXPR [ (1, _437, _439) (-1, _436) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(434))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(435))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(434))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(434))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(435))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(435))], q_c: 0 })], outputs: [Simple(Witness(440)), Simple(Witness(441)), Simple(Witness(442))]
EXPR [ (1, _434, _434) (-1, _443) 0 ]
EXPR [ (1, _434, _435) (-1, _444) 0 ]
EXPR [ (1, _435, _435) (-1, _445) 0 ]
EXPR [ (555, _440, _442) (1, _440) (-2, _444) 0 ]
EXPR [ (555, _441, _442) (1, _441) (1, _443) (-1, _445) 0 ]
EXPR [ (1, _443, _445) (-1, _442) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(440))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(441))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(440))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(440))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(441))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(441))], q_c: 0 })], outputs: [Simple(Witness(446)), Simple(Witness(447)), Simple(Witness(448))]
EXPR [ (1, _440, _440) (-1, _449) 0 ]
EXPR [ (1, _440, _441) (-1, _450) 0 ]
EXPR [ (1, _441, _441) (-1, _451) 0 ]
EXPR [ (555, _446, _448) (1, _446) (-2, _450) 0 ]
EXPR [ (555, _447, _448) (1, _447) (1, _449) (-1, _451) 0 ]
EXPR [ (1, _449, _451) (-1, _448) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(446))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(447))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(446))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(446))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(447))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(447))], q_c: 0 })], outputs: [Simple(Witness(452)), Simple(Witness(453)), Simple(Witness(454))]
EXPR [ (1, _446, _446) (-1, _455) 0 ]
EXPR [ (1, _446, _447) (-1, _456) 0 ]
EXPR [ (1, _447, _447) (-1, _457) 0 ]
EXPR [ (555, _452, _454) (1, _452) (-2, _456) 0 ]
EXPR [ (555, _453, _454) (1, _453) (1, _455) (-1, _457) 0 ]
EXPR [ (1, _455, _457) (-1, _454) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(452))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(453))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(452))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(452))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(453))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(453))], q_c: 0 })], outputs: [Simple(Witness(458)), Simple(Witness(459)), Simple(Witness(460))]
EXPR [ (1, _452, _452) (-1, _461) 0 ]
EXPR [ (1, _452, _453) (-1, _462) 0 ]
EXPR [ (1, _453, _453) (-1, _463) 0 ]
EXPR [ (555, _458, _460) (1, _458) (-2, _462) 0 ]
EXPR [ (555, _459, _460) (1, _459) (1, _461) (-1, _463) 0 ]
EXPR [ (1, _461, _463) (-1, _460) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(458))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(459))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(458))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(458))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(459))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(459))], q_c: 0 })], outputs: [Simple(Witness(464)), Simple(Witness(465)), Simple(Witness(466))]
EXPR [ (1, _458, _458) (-1, _467) 0 ]
EXPR [ (1, _458, _459) (-1, _468) 0 ]
EXPR [ (1, _459, _459) (-1, _469) 0 ]
EXPR [ (555, _464, _466) (1, _464) (-2, _468) 0 ]
EXPR [ (555, _465, _466) (1, _465) (1, _467) (-1, _469) 0 ]
EXPR [ (1, _467, _469) (-1, _466) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(464))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(465))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(464))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(464))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(465))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(465))], q_c: 0 })], outputs: [Simple(Witness(470)), Simple(Witness(471)), Simple(Witness(472))]
EXPR [ (1, _464, _464) (-1, _473) 0 ]
EXPR [ (1, _464, _465) (-1, _474) 0 ]
EXPR [ (1, _465, _465) (-1, _475) 0 ]
EXPR [ (555, _470, _472) (1, _470) (-2, _474) 0 ]
EXPR [ (555, _471, _472) (1, _471) (1, _473) (-1, _475) 0 ]
EXPR [ (1, _473, _475) (-1, _472) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(470))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(471))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(470))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(470))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(471))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(471))], q_c: 0 })], outputs: [Simple(Witness(476)), Simple(Witness(477)), Simple(Witness(478))]
EXPR [ (1, _470, _470) (-1, _479) 0 ]
EXPR [ (1, _470, _471) (-1, _480) 0 ]
EXPR [ (1, _471, _471) (-1, _481) 0 ]
EXPR [ (555, _476, _478) (1, _476) (-2, _480) 0 ]
EXPR [ (555, _477, _478) (1, _477) (1, _479) (-1, _481) 0 ]
EXPR [ (1, _479, _481) (-1, _478) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(476))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(477))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(476))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(476))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(477))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(477))], q_c: 0 })], outputs: [Simple(Witness(482)), Simple(Witness(483)), Simple(Witness(484))]
EXPR [ (1, _476, _476) (-1, _485) 0 ]
EXPR [ (1, _476, _477) (-1, _486) 0 ]
EXPR [ (1, _477, _477) (-1, _487) 0 ]
EXPR [ (555, _482, _484) (1, _482) (-2, _486) 0 ]
EXPR [ (555, _483, _484) (1, _483) (1, _485) (-1, _487) 0 ]
EXPR [ (1, _485, _487) (-1, _484) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(482))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(483))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(482))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(482))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(483))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(483))], q_c: 0 })], outputs: [Simple(Witness(488)), Simple(Witness(489)), Simple(Witness(490))]
EXPR [ (1, _482, _482) (-1, _491) 0 ]
EXPR [ (1, _482, _483) (-1, _492) 0 ]
EXPR [ (1, _483, _483) (-1, _493) 0 ]
EXPR [ (555, _488, _490) (1, _488) (-2, _492) 0 ]
EXPR [ (555, _489, _490) (1, _489) (1, _491) (-1, _493) 0 ]
EXPR [ (1, _491, _493) (-1, _490) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(488))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(489))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(488))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(488))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(489))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(489))], q_c: 0 })], outputs: [Simple(Witness(494)), Simple(Witness(495)), Simple(Witness(496))]
EXPR [ (1, _488, _488) (-1, _497) 0 ]
EXPR [ (1, _488, _489) (-1, _498) 0 ]
EXPR [ (1, _489, _489) (-1, _499) 0 ]
EXPR [ (555, _494, _496) (1, _494) (-2, _498) 0 ]
EXPR [ (555, _495, _496) (1, _495) (1, _497) (-1, _499) 0 ]
EXPR [ (1, _497, _499) (-1, _496) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(494))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(495))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(494))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(494))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(495))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(495))], q_c: 0 })], outputs: [Simple(Witness(500)), Simple(Witness(501)), Simple(Witness(502))]
EXPR [ (1, _494, _494) (-1, _503) 0 ]
EXPR [ (1, _494, _495) (-1, _504) 0 ]
EXPR [ (1, _495, _495) (-1, _505) 0 ]
EXPR [ (555, _500, _502) (1, _500) (-2, _504) 0 ]
EXPR [ (555, _501, _502) (1, _501) (1, _503) (-1, _505) 0 ]
EXPR [ (1, _503, _505) (-1, _502) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(500))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(501))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(500))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(500))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(501))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(501))], q_c: 0 })], outputs: [Simple(Witness(506)), Simple(Witness(507)), Simple(Witness(508))]
EXPR [ (1, _500, _500) (-1, _509) 0 ]
EXPR [ (1, _500, _501) (-1, _510) 0 ]
EXPR [ (1, _501, _501) (-1, _511) 0 ]
EXPR [ (555, _506, _508) (1, _506) (-2, _510) 0 ]
EXPR [ (555, _507, _508) (1, _507) (1, _509) (-1, _511) 0 ]
EXPR [ (1, _509, _511) (-1, _508) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(506))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(507))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(506))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(506))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(507))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(507))], q_c: 0 })], outputs: [Simple(Witness(512)), Simple(Witness(513)), Simple(Witness(514))]
EXPR [ (1, _506, _506) (-1, _515) 0 ]
EXPR [ (1, _506, _507) (-1, _516) 0 ]
EXPR [ (1, _507, _507) (-1, _517) 0 ]
EXPR [ (555, _512, _514) (1, _512) (-2, _516) 0 ]
EXPR [ (555, _513, _514) (1, _513) (1, _515) (-1, _517) 0 ]
EXPR [ (1, _515, _517) (-1, _514) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(512))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(513))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(512))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(512))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(513))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(513))], q_c: 0 })], outputs: [Simple(Witness(518)), Simple(Witness(519)), Simple(Witness(520))]
EXPR [ (1, _512, _512) (-1, _521) 0 ]
EXPR [ (1, _512, _513) (-1, _522) 0 ]
EXPR [ (1, _513, _513) (-1, _523) 0 ]
EXPR [ (555, _518, _520) (1, _518) (-2, _522) 0 ]
EXPR [ (555, _519, _520) (1, _519) (1, _521) (-1, _523) 0 ]
EXPR [ (1, _521, _523) (-1, _520) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(518))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(519))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(518))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(518))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(519))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(519))], q_c: 0 })], outputs: [Simple(Witness(524)), Simple(Witness(525)), Simple(Witness(526))]
EXPR [ (1, _518, _518) (-1, _527) 0 ]
EXPR [ (1, _518, _519) (-1, _528) 0 ]
EXPR [ (1, _519, _519) (-1, _529) 0 ]
EXPR [ (555, _524, _526) (1, _524) (-2, _528) 0 ]
EXPR [ (555, _525, _526) (1, _525) (1, _527) (-1, _529) 0 ]
EXPR [ (1, _527, _529) (-1, _526) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(524))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(525))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(524))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(524))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(525))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(525))], q_c: 0 })], outputs: [Simple(Witness(530)), Simple(Witness(531)), Simple(Witness(532))]
EXPR [ (1, _524, _524) (-1, _533) 0 ]
EXPR [ (1, _524, _525) (-1, _534) 0 ]
EXPR [ (1, _525, _525) (-1, _535) 0 ]
EXPR [ (555, _530, _532) (1, _530) (-2, _534) 0 ]
EXPR [ (555, _531, _532) (1, _531) (1, _533) (-1, _535) 0 ]
EXPR [ (1, _533, _535) (-1, _532) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(530))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(531))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(530))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(530))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(531))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(531))], q_c: 0 })], outputs: [Simple(Witness(536)), Simple(Witness(537)), Simple(Witness(538))]
EXPR [ (1, _530, _530) (-1, _539) 0 ]
EXPR [ (1, _530, _531) (-1, _540) 0 ]
EXPR [ (1, _531, _531) (-1, _541) 0 ]
EXPR [ (555, _536, _538) (1, _536) (-2, _540) 0 ]
EXPR [ (555, _537, _538) (1, _537) (1, _539) (-1, _541) 0 ]
EXPR [ (1, _539, _541) (-1, _538) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(536))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(537))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(536))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(536))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(537))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(537))], q_c: 0 })], outputs: [Simple(Witness(542)), Simple(Witness(543)), Simple(Witness(544))]
EXPR [ (1, _536, _536) (-1, _545) 0 ]
EXPR [ (1, _536, _537) (-1, _546) 0 ]
EXPR [ (1, _537, _537) (-1, _547) 0 ]
EXPR [ (555, _542, _544) (1, _542) (-2, _546) 0 ]
EXPR [ (555, _543, _544) (1, _543) (1, _545) (-1, _547) 0 ]
EXPR [ (1, _545, _547) (-1, _544) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(542))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(543))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(542))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(542))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(543))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(543))], q_c: 0 })], outputs: [Simple(Witness(548)), Simple(Witness(549)), Simple(Witness(550))]
EXPR [ (1, _542, _542) (-1, _551) 0 ]
EXPR [ (1, _542, _543) (-1, _552) 0 ]
EXPR [ (1, _543, _543) (-1, _553) 0 ]
EXPR [ (555, _548, _550) (1, _548) (-2, _552) 0 ]
EXPR [ (555, _549, _550) (1, _549) (1, _551) (-1, _553) 0 ]
EXPR [ (1, _551, _553) (-1, _550) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(548))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(549))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(548))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(548))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(549))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(549))], q_c: 0 })], outputs: [Simple(Witness(554)), Simple(Witness(555)), Simple(Witness(556))]
EXPR [ (1, _548, _548) (-1, _557) 0 ]
EXPR [ (1, _548, _549) (-1, _558) 0 ]
EXPR [ (1, _549, _549) (-1, _559) 0 ]
EXPR [ (555, _554, _556) (1, _554) (-2, _558) 0 ]
EXPR [ (555, _555, _556) (1, _555) (1, _557) (-1, _559) 0 ]
EXPR [ (1, _557, _559) (-1, _556) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(554))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(555))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(554))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(554))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(555))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(555))], q_c: 0 })], outputs: [Simple(Witness(560)), Simple(Witness(561)), Simple(Witness(562))]
EXPR [ (1, _554, _554) (-1, _563) 0 ]
EXPR [ (1, _554, _555) (-1, _564) 0 ]
EXPR [ (1, _555, _555) (-1, _565) 0 ]
EXPR [ (555, _560, _562) (1, _560) (-2, _564) 0 ]
EXPR [ (555, _561, _562) (1, _561) (1, _563) (-1, _565) 0 ]
EXPR [ (1, _563, _565) (-1, _562) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(560))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(561))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(560))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(560))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(561))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(561))], q_c: 0 })], outputs: [Simple(Witness(566)), Simple(Witness(567)), Simple(Witness(568))]
EXPR [ (1, _560, _560) (-1, _569) 0 ]
EXPR [ (1, _560, _561) (-1, _570) 0 ]
EXPR [ (1, _561, _561) (-1, _571) 0 ]
EXPR [ (555, _566, _568) (1, _566) (-2, _570) 0 ]
EXPR [ (555, _567, _568) (1, _567) (1, _569) (-1, _571) 0 ]
EXPR [ (1, _569, _571) (-1, _568) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(566))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(567))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(566))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(566))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(567))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(567))], q_c: 0 })], outputs: [Simple(Witness(572)), Simple(Witness(573)), Simple(Witness(574))]
EXPR [ (1, _566, _566) (-1, _575) 0 ]
EXPR [ (1, _566, _567) (-1, _576) 0 ]
EXPR [ (1, _567, _567) (-1, _577) 0 ]
EXPR [ (555, _572, _574) (1, _572) (-2, _576) 0 ]
EXPR [ (555, _573, _574) (1, _573) (1, _575) (-1, _577) 0 ]
EXPR [ (1, _575, _577) (-1, _574) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(572))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(573))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(572))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(572))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(573))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(573))], q_c: 0 })], outputs: [Simple(Witness(578)), Simple(Witness(579)), Simple(Witness(580))]
EXPR [ (1, _572, _572) (-1, _581) 0 ]
EXPR [ (1, _572, _573) (-1, _582) 0 ]
EXPR [ (1, _573, _573) (-1, _583) 0 ]
EXPR [ (555, _578, _580) (1, _578) (-2, _582) 0 ]
EXPR [ (555, _579, _580) (1, _579) (1, _581) (-1, _583) 0 ]
EXPR [ (1, _581, _583) (-1, _580) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(578))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(579))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(578))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(578))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(579))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(579))], q_c: 0 })], outputs: [Simple(Witness(584)), Simple(Witness(585)), Simple(Witness(586))]
EXPR [ (1, _578, _578) (-1, _587) 0 ]
EXPR [ (1, _578, _579) (-1, _588) 0 ]
EXPR [ (1, _579, _579) (-1, _589) 0 ]
EXPR [ (555, _584, _586) (1, _584) (-2, _588) 0 ]
EXPR [ (555, _585, _586) (1, _585) (1, _587) (-1, _589) 0 ]
EXPR [ (1, _587, _589) (-1, _586) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(584))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(585))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(584))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(584))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(585))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(585))], q_c: 0 })], outputs: [Simple(Witness(590)), Simple(Witness(591)), Simple(Witness(592))]
EXPR [ (1, _584, _584) (-1, _593) 0 ]
EXPR [ (1, _584, _585) (-1, _594) 0 ]
EXPR [ (1, _585, _585) (-1, _595) 0 ]
EXPR [ (555, _590, _592) (1, _590) (-2, _594) 0 ]
EXPR [ (555, _591, _592) (1, _591) (1, _593) (-1, _595) 0 ]
EXPR [ (1, _593, _595) (-1, _592) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(590))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(591))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(590))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(590))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(591))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(591))], q_c: 0 })], outputs: [Simple(Witness(596)), Simple(Witness(597)), Simple(Witness(598))]
EXPR [ (1, _590, _590) (-1, _599) 0 ]
EXPR [ (1, _590, _591) (-1, _600) 0 ]
EXPR [ (1, _591, _591) (-1, _601) 0 ]
EXPR [ (555, _596, _598) (1, _596) (-2, _600) 0 ]
EXPR [ (555, _597, _598) (1, _597) (1, _599) (-1, _601) 0 ]
EXPR [ (1, _599, _601) (-1, _598) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(596))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(597))], q_c: 0 })], outputs: []
BRILLIG CALL func 0: PREDICATE = %EXPR [ 1 ]%
inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(596))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(596))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(597))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(597))], q_c: 0 })], outputs: [Simple(Witness(602)), Simple(Witness(603)), Simple(Witness(604))]
EXPR [ (1, _596, _596) (-1, _605) 0 ]
EXPR [ (1, _596, _597) (-1, _606) 0 ]
EXPR [ (1, _597, _597) (-1, _607) 0 ]
EXPR [ (555, _602, _604) (1, _602) (-2, _606) 0 ]
EXPR [ (555, _603, _604) (1, _603) (1, _605) (-1, _607) 0 ]
EXPR [ (1, _605, _607) (-1, _604) 0 ]
BRILLIG CALL func 1: PREDICATE = %EXPR [ 1 ]%
inputs: [Array([Expression { mul_terms: [], linear_combinations: [], q_c: 123 }, Expression { mul_terms: [], linear_combinations: [], q_c: 65 }, Expression { mul_terms: [], linear_combinations: [], q_c: 125 }]), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(602))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(603))], q_c: 0 })], outputs: []

unconstrained func 0
[Const { destination: MemoryAddress(0), bit_size: 64, value: 1031 }, CalldataCopy { destination_address: MemoryAddress(1024), size: 4, offset: 0 }, Mov { destination: MemoryAddress(2), source: MemoryAddress(1024) }, Mov { destination: MemoryAddress(3), source: MemoryAddress(1025) }, Mov { destination: MemoryAddress(4), source: MemoryAddress(1026) }, Mov { destination: MemoryAddress(5), source: MemoryAddress(1027) }, Call { location: 11 }, Mov { destination: MemoryAddress(1028), source: MemoryAddress(2) }, Mov { destination: MemoryAddress(1029), source: MemoryAddress(3) }, Mov { destination: MemoryAddress(1030), source: MemoryAddress(4) }, Stop { return_data_offset: 1028, return_data_size: 3 }, BinaryFieldOp { destination: MemoryAddress(6), op: Mul, lhs: MemoryAddress(4), rhs: MemoryAddress(5) }, BinaryFieldOp { destination: MemoryAddress(7), op: Mul, lhs: MemoryAddress(6), rhs: MemoryAddress(2) }, BinaryFieldOp { destination: MemoryAddress(8), op: Mul, lhs: MemoryAddress(7), rhs: MemoryAddress(3) }, BinaryFieldOp { destination: MemoryAddress(7), op: Mul, lhs: MemoryAddress(2), rhs: MemoryAddress(3) }, BinaryFieldOp { destination: MemoryAddress(9), op: Sub, lhs: MemoryAddress(7), rhs: MemoryAddress(6) }, Const { destination: MemoryAddress(7), bit_size: 254, value: 555 }, BinaryFieldOp { destination: MemoryAddress(6), op: Mul, lhs: MemoryAddress(8), rhs: MemoryAddress(7) }, Const { destination: MemoryAddress(11), bit_size: 254, value: 1 }, BinaryFieldOp { destination: MemoryAddress(10), op: Sub, lhs: MemoryAddress(6), rhs: MemoryAddress(11) }, BinaryFieldOp { destination: MemoryAddress(12), op: Div, lhs: MemoryAddress(9), rhs: MemoryAddress(10) }, BinaryFieldOp { destination: MemoryAddress(9), op: Mul, lhs: MemoryAddress(2), rhs: MemoryAddress(5) }, BinaryFieldOp { destination: MemoryAddress(10), op: Mul, lhs: MemoryAddress(4), rhs: MemoryAddress(3) }, BinaryFieldOp { destination: MemoryAddress(13), op: Add, lhs: MemoryAddress(9), rhs: MemoryAddress(10) }, BinaryFieldOp { destination: MemoryAddress(9), op: Add, lhs: MemoryAddress(6), rhs: MemoryAddress(11) }, BinaryFieldOp { destination: MemoryAddress(6), op: Div, lhs: MemoryAddress(13), rhs: MemoryAddress(9) }, Mov { destination: MemoryAddress(9), source: MemoryAddress(6) }, Mov { destination: MemoryAddress(13), source: MemoryAddress(12) }, Mov { destination: MemoryAddress(10), source: MemoryAddress(8) }, Mov { destination: MemoryAddress(2), source: MemoryAddress(9) }, Mov { destination: MemoryAddress(3), source: MemoryAddress(13) }, Mov { destination: MemoryAddress(4), source: MemoryAddress(10) }, Return]
unconstrained func 1
[Const { destination: MemoryAddress(0), bit_size: 64, value: 1030 }, CalldataCopy { destination_address: MemoryAddress(1024), size: 6, offset: 0 }, Cast { destination: MemoryAddress(1024), source: MemoryAddress(1024), bit_size: 8 }, Cast { destination: MemoryAddress(1025), source: MemoryAddress(1025), bit_size: 8 }, Cast { destination: MemoryAddress(1026), source: MemoryAddress(1026), bit_size: 8 }, Cast { destination: MemoryAddress(1027), source: MemoryAddress(1027), bit_size: 64 }, Const { destination: MemoryAddress(2), bit_size: 64, value: 2¹⁰ }, Const { destination: MemoryAddress(3), bit_size: 64, value: 1 }, Mov { destination: MemoryAddress(4), source: MemoryAddress(1027) }, Mov { destination: MemoryAddress(5), source: MemoryAddress(1028) }, Mov { destination: MemoryAddress(6), source: MemoryAddress(1029) }, Mov { destination: MemoryAddress(7), source: MemoryAddress(2) }, Mov { destination: MemoryAddress(2), source: MemoryAddress(7) }, Call { location: 15 }, Stop { return_data_offset: 1030, return_data_size: 0 }, Const { destination: MemoryAddress(7), bit_size: 1, value: 1 }, Const { destination: MemoryAddress(10), bit_size: 64, value: 89 }, Mov { destination: MemoryAddress(8), source: MemoryAddress(0) }, BinaryIntOp { destination: MemoryAddress(0), op: Add, bit_size: 64, lhs: MemoryAddress(0), rhs: MemoryAddress(10) }, Const { destination: MemoryAddress(9), bit_size: 64, value: 1 }, Const { destination: MemoryAddress(10), bit_size: 64, value: 0 }, Const { destination: MemoryAddress(11), bit_size: 8, value: 123 }, BinaryIntOp { destination: MemoryAddress(12), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(12), source: MemoryAddress(11) }, Const { destination: MemoryAddress(12), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(12) }, Const { destination: MemoryAddress(12), bit_size: 8, value: 34 }, BinaryIntOp { destination: MemoryAddress(13), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(13), source: MemoryAddress(12) }, Const { destination: MemoryAddress(13), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(13) }, Const { destination: MemoryAddress(13), bit_size: 8, value: 107 }, BinaryIntOp { destination: MemoryAddress(14), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(14), source: MemoryAddress(13) }, Const { destination: MemoryAddress(14), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(14) }, Const { destination: MemoryAddress(14), bit_size: 8, value: 105 }, BinaryIntOp { destination: MemoryAddress(15), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(15), source: MemoryAddress(14) }, Const { destination: MemoryAddress(15), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(15) }, Const { destination: MemoryAddress(15), bit_size: 8, value: 110 }, BinaryIntOp { destination: MemoryAddress(16), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(16), source: MemoryAddress(15) }, Const { destination: MemoryAddress(16), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(16) }, Const { destination: MemoryAddress(16), bit_size: 8, value: 100 }, BinaryIntOp { destination: MemoryAddress(17), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(17), source: MemoryAddress(16) }, Const { destination: MemoryAddress(17), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(17) }, BinaryIntOp { destination: MemoryAddress(17), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(17), source: MemoryAddress(12) }, Const { destination: MemoryAddress(17), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(17) }, Const { destination: MemoryAddress(17), bit_size: 8, value: 58 }, BinaryIntOp { destination: MemoryAddress(18), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(18), source: MemoryAddress(17) }, Const { destination: MemoryAddress(18), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(18) }, BinaryIntOp { destination: MemoryAddress(18), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(18), source: MemoryAddress(12) }, Const { destination: MemoryAddress(18), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(18) }, Const { destination: MemoryAddress(18), bit_size: 8, value: 115 }, BinaryIntOp { destination: MemoryAddress(19), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(19), source: MemoryAddress(18) }, Const { destination: MemoryAddress(19), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(19) }, Const { destination: MemoryAddress(19), bit_size: 8, value: 116 }, BinaryIntOp { destination: MemoryAddress(20), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(20), source: MemoryAddress(19) }, Const { destination: MemoryAddress(20), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(20) }, Const { destination: MemoryAddress(20), bit_size: 8, value: 114 }, BinaryIntOp { destination: MemoryAddress(21), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(21), source: MemoryAddress(20) }, Const { destination: MemoryAddress(21), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(21) }, Const { destination: MemoryAddress(21), bit_size: 8, value: 117 }, BinaryIntOp { destination: MemoryAddress(22), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(22), source: MemoryAddress(21) }, Const { destination: MemoryAddress(22), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(22) }, Const { destination: MemoryAddress(22), bit_size: 8, value: 99 }, BinaryIntOp { destination: MemoryAddress(23), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(23), source: MemoryAddress(22) }, Const { destination: MemoryAddress(23), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(23) }, BinaryIntOp { destination: MemoryAddress(23), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(23), source: MemoryAddress(19) }, Const { destination: MemoryAddress(23), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(23) }, BinaryIntOp { destination: MemoryAddress(23), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(23), source: MemoryAddress(12) }, Const { destination: MemoryAddress(23), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(23) }, Const { destination: MemoryAddress(23), bit_size: 8, value: 44 }, BinaryIntOp { destination: MemoryAddress(24), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(24), source: MemoryAddress(23) }, Const { destination: MemoryAddress(24), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(24) }, BinaryIntOp { destination: MemoryAddress(24), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(24), source: MemoryAddress(12) }, Const { destination: MemoryAddress(24), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(24) }, BinaryIntOp { destination: MemoryAddress(24), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(24), source: MemoryAddress(15) }, Const { destination: MemoryAddress(24), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(24) }, Const { destination: MemoryAddress(24), bit_size: 8, value: 97 }, BinaryIntOp { destination: MemoryAddress(25), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(25), source: MemoryAddress(24) }, Const { destination: MemoryAddress(25), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(25) }, Const { destination: MemoryAddress(25), bit_size: 8, value: 109 }, BinaryIntOp { destination: MemoryAddress(26), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(26), source: MemoryAddress(25) }, Const { destination: MemoryAddress(26), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(26) }, Const { destination: MemoryAddress(26), bit_size: 8, value: 101 }, BinaryIntOp { destination: MemoryAddress(27), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(27), source: MemoryAddress(26) }, Const { destination: MemoryAddress(27), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(27) }, BinaryIntOp { destination: MemoryAddress(27), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(27), source: MemoryAddress(12) }, Const { destination: MemoryAddress(27), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(27) }, BinaryIntOp { destination: MemoryAddress(27), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(27), source: MemoryAddress(17) }, Const { destination: MemoryAddress(27), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(27) }, BinaryIntOp { destination: MemoryAddress(27), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(27), source: MemoryAddress(12) }, Const { destination: MemoryAddress(27), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(27) }, Const { destination: MemoryAddress(27), bit_size: 8, value: 67 }, BinaryIntOp { destination: MemoryAddress(28), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(28), source: MemoryAddress(27) }, Const { destination: MemoryAddress(28), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(28) }, BinaryIntOp { destination: MemoryAddress(28), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(28), source: MemoryAddress(21) }, Const { destination: MemoryAddress(28), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(28) }, BinaryIntOp { destination: MemoryAddress(28), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(28), source: MemoryAddress(20) }, Const { destination: MemoryAddress(28), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(28) }, Const { destination: MemoryAddress(28), bit_size: 8, value: 118 }, BinaryIntOp { destination: MemoryAddress(29), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(29), source: MemoryAddress(28) }, Const { destination: MemoryAddress(29), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(29) }, BinaryIntOp { destination: MemoryAddress(29), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(29), source: MemoryAddress(26) }, Const { destination: MemoryAddress(29), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(29) }, BinaryIntOp { destination: MemoryAddress(29), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(29), source: MemoryAddress(12) }, Const { destination: MemoryAddress(29), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(29) }, BinaryIntOp { destination: MemoryAddress(29), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(29), source: MemoryAddress(23) }, Const { destination: MemoryAddress(29), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(29) }, BinaryIntOp { destination: MemoryAddress(29), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(29), source: MemoryAddress(12) }, Const { destination: MemoryAddress(29), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(29) }, Const { destination: MemoryAddress(29), bit_size: 8, value: 102 }, BinaryIntOp { destination: MemoryAddress(30), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(30), source: MemoryAddress(29) }, Const { destination: MemoryAddress(30), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(30) }, BinaryIntOp { destination: MemoryAddress(30), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(30), source: MemoryAddress(14) }, Const { destination: MemoryAddress(30), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(30) }, BinaryIntOp { destination: MemoryAddress(30), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(30), source: MemoryAddress(26) }, Const { destination: MemoryAddress(30), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(30) }, Const { destination: MemoryAddress(30), bit_size: 8, value: 108 }, BinaryIntOp { destination: MemoryAddress(31), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(31), source: MemoryAddress(30) }, Const { destination: MemoryAddress(31), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(31) }, BinaryIntOp { destination: MemoryAddress(31), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(31), source: MemoryAddress(16) }, Const { destination: MemoryAddress(31), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(31) }, BinaryIntOp { destination: MemoryAddress(31), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(31), source: MemoryAddress(18) }, Const { destination: MemoryAddress(31), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(31) }, BinaryIntOp { destination: MemoryAddress(31), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(31), source: MemoryAddress(12) }, Const { destination: MemoryAddress(31), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(31) }, BinaryIntOp { destination: MemoryAddress(31), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(31), source: MemoryAddress(17) }, Const { destination: MemoryAddress(31), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(31) }, Const { destination: MemoryAddress(31), bit_size: 8, value: 91 }, BinaryIntOp { destination: MemoryAddress(32), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(32), source: MemoryAddress(31) }, Const { destination: MemoryAddress(32), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(32) }, BinaryIntOp { destination: MemoryAddress(32), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(32), source: MemoryAddress(31) }, Const { destination: MemoryAddress(32), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(32) }, BinaryIntOp { destination: MemoryAddress(32), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(32), source: MemoryAddress(12) }, Const { destination: MemoryAddress(32), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(32) }, Const { destination: MemoryAddress(32), bit_size: 8, value: 120 }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(32) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(12) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(23) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(11) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(12) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(13) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(14) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(15) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(16) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(12) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(17) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(12) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(29) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(14) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(26) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(30) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(16) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, BinaryIntOp { destination: MemoryAddress(33), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(33), source: MemoryAddress(12) }, Const { destination: MemoryAddress(33), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(33) }, Const { destination: MemoryAddress(33), bit_size: 8, value: 125 }, BinaryIntOp { destination: MemoryAddress(34), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(34), source: MemoryAddress(33) }, Const { destination: MemoryAddress(34), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(34) }, Const { destination: MemoryAddress(34), bit_size: 8, value: 93 }, BinaryIntOp { destination: MemoryAddress(35), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(35), source: MemoryAddress(34) }, Const { destination: MemoryAddress(35), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(35) }, BinaryIntOp { destination: MemoryAddress(35), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(35), source: MemoryAddress(23) }, Const { destination: MemoryAddress(35), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(35) }, BinaryIntOp { destination: MemoryAddress(35), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(35), source: MemoryAddress(31) }, Const { destination: MemoryAddress(35), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(35) }, BinaryIntOp { destination: MemoryAddress(35), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(35), source: MemoryAddress(12) }, Const { destination: MemoryAddress(35), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(35) }, Const { destination: MemoryAddress(35), bit_size: 8, value: 121 }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(35) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(12) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(23) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(11) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(12) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(13) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(14) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(15) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(16) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(12) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(17) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(12) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(29) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(14) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(26) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(30) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(16) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(12) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(33) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(34) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(34) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, BinaryIntOp { destination: MemoryAddress(36), op: Add, bit_size: 64, lhs: MemoryAddress(8), rhs: MemoryAddress(10) }, Store { destination_pointer: MemoryAddress(36), source: MemoryAddress(33) }, Const { destination: MemoryAddress(36), bit_size: 64, value: 1 }, BinaryIntOp { destination: MemoryAddress(10), op: Add, bit_size: 64, lhs: MemoryAddress(10), rhs: MemoryAddress(36) }, ForeignCall { function: "print", destinations: [], destination_value_types: [], inputs: [MemoryAddress(MemoryAddress(7)), HeapArray(HeapArray { pointer: MemoryAddress(2), size: 3 }), MemoryAddress(MemoryAddress(4)), MemoryAddress(MemoryAddress(5)), MemoryAddress(MemoryAddress(6)), HeapArray(HeapArray { pointer: MemoryAddress(8), size: 89 }), MemoryAddress(MemoryAddress(7))], input_value_types: [Simple(1), Array { value_types: [Simple(8)], size: 3 }, Simple(254), Simple(254), Simple(254), Array { value_types: [Simple(8)], size: 89 }, Simple(1)] }, Return]

+---------+----------+----------------------+--------------+----------------------+
| Package | Function | Expression Width     | ACIR Opcodes | Backend Circuit Size |
+---------+----------+----------------------+--------------+----------------------+
| edwards | main     | Bounded { width: 4 } | 909          | 724                  |
+---------+----------+----------------------+--------------+----------------------+
